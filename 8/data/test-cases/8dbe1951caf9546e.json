{
  "uid" : "8dbe1951caf9546e",
  "name" : "test_capacity_db",
  "fullName" : "tests_api.test_bd.TestFull#test_capacity_db",
  "historyId" : "936f7fa0df691d843e1d921c6b4b86e7",
  "time" : {
    "start" : 1713402373552,
    "stop" : 1713402373986,
    "duration" : 434
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f11f79f0cb0>\ns = 'Some general exception', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7f11f6c20ce0>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('test_capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(ConnectionData.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:49: in get_profile\n    print(result_get.json())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f11f79f0cb0>\ns = 'Some general exception', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7f11f6c20ce0>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('test_capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(ConnectionData.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:49: in get_profile\n    print(result_get.json())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "get_profile",
      "time" : {
        "start" : 1713402373552,
        "stop" : 1713402373985,
        "duration" : 433
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 49, in get_profile\n    print(result_get.json())\n          ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "GET https://dbend.areso.pro/get_profile",
        "time" : {
          "start" : 1713402373552,
          "stop" : 1713402373985,
          "duration" : 433
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Status code: 500",
          "time" : {
            "start" : 1713402373985,
            "stop" : 1713402373985,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "hasContent" : false,
          "stepsCount" : 0,
          "attachmentsCount" : 0
        }, {
          "name" : "Response: Some general exception",
          "time" : {
            "start" : 1713402373985,
            "stop" : 1713402373985,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "hasContent" : false,
          "stepsCount" : 0,
          "attachmentsCount" : 0
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 2,
        "attachmentsCount" : 0
      }, {
        "name" : "Response JSON: Some general exception",
        "time" : {
          "start" : 1713402373985,
          "stop" : 1713402373985,
          "duration" : 0
        },
        "status" : "broken",
        "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
        "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 49, in get_profile\n    print(result_get.json())\n          ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 0
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "token",
        "value" : "'2c399ca8-0f57-4b2b-8082-bb628420e3b1'"
      } ],
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 4,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 5,
    "attachmentsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "suite",
    "value" : "Test Connection DB"
  }, {
    "name" : "epic",
    "value" : "Connection DB"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestFull"
  }, {
    "name" : "host",
    "value" : "fv-az1200-164"
  }, {
    "name" : "thread",
    "value" : "2368-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 8,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 11
      },
      "items" : [ {
        "uid" : "ead54961983bf9c4",
        "reportUrl" : "https://Areso.github.io/Oblache/6//#testresult/ead54961983bf9c4",
        "status" : "broken",
        "statusDetails" : "AttributeError: 'NoneType' object has no attribute 'split'",
        "time" : {
          "start" : 1713228850695,
          "stop" : 1713228871941,
          "duration" : 21246
        }
      }, {
        "uid" : "d04628e7218242e0",
        "reportUrl" : "https://Areso.github.io/Oblache/5//#testresult/d04628e7218242e0",
        "status" : "broken",
        "statusDetails" : "AttributeError: 'NoneType' object has no attribute 'split'",
        "time" : {
          "start" : 1713152996704,
          "stop" : 1713153017808,
          "duration" : 21104
        }
      }, {
        "uid" : "69c05a215cafac5d",
        "reportUrl" : "https://Areso.github.io/Oblache/4//#testresult/69c05a215cafac5d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Value disk db used(MB) should be more than 0.\nassert 0 > 0\n +  where 0 = int(0)",
        "time" : {
          "start" : 1713057198362,
          "stop" : 1713057309831,
          "duration" : 111469
        }
      }, {
        "uid" : "9215b6c4f289c2c6",
        "reportUrl" : "https://Areso.github.io/Oblache/3//#testresult/9215b6c4f289c2c6",
        "status" : "failed",
        "statusDetails" : "AssertionError: Value disk db used(MB) should be more than 0.\nassert 0 > 0\n +  where 0 = int(0)",
        "time" : {
          "start" : 1712969080676,
          "stop" : 1712969180311,
          "duration" : 99635
        }
      }, {
        "uid" : "dfb9b230b8ddb88d",
        "reportUrl" : "https://Areso.github.io/Oblache/2//#testresult/dfb9b230b8ddb88d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Value disk db used(MB) should be more than 0.\nassert 0 > 0\n +  where 0 = int(0)",
        "time" : {
          "start" : 1712883278291,
          "stop" : 1712883375667,
          "duration" : 97376
        }
      }, {
        "uid" : "bbdad3ff14844e63",
        "reportUrl" : "https://Areso.github.io/Oblache/1//#testresult/bbdad3ff14844e63",
        "status" : "failed",
        "statusDetails" : "AssertionError: Value disk db used(MB) should be more than 0.\nassert 0 > 0\n +  where 0 = int(0)",
        "time" : {
          "start" : 1712796876177,
          "stop" : 1712796974934,
          "duration" : 98757
        }
      }, {
        "uid" : "e98edc6bbb2f806b",
        "reportUrl" : "https://Areso.github.io/Oblache/22//#testresult/e98edc6bbb2f806b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Value disk db used(MB) should be more than 0.\nassert 0 > 0\n +  where 0 = int(0)",
        "time" : {
          "start" : 1712763299246,
          "stop" : 1712763393439,
          "duration" : 94193
        }
      }, {
        "uid" : "7d550d8cec98556",
        "reportUrl" : "https://Areso.github.io/Oblache/21//#testresult/7d550d8cec98556",
        "status" : "failed",
        "statusDetails" : "AssertionError: Value disk db used(MB) should be more than 0.\nassert 0 > 0\n +  where 0 = int(0)",
        "time" : {
          "start" : 1712606626853,
          "stop" : 1712606722194,
          "duration" : 95341
        }
      }, {
        "uid" : "db21931b87712e72",
        "reportUrl" : "https://Areso.github.io/Oblache/20//#testresult/db21931b87712e72",
        "status" : "failed",
        "statusDetails" : "AssertionError: Value disk db used(MB) should be more than 0.\nassert 0 > 0\n +  where 0 = int(0)",
        "time" : {
          "start" : 1712605857489,
          "stop" : 1712605955132,
          "duration" : 97643
        }
      }, {
        "uid" : "eb10135824873b2c",
        "reportUrl" : "https://Areso.github.io/Oblache/19//#testresult/eb10135824873b2c",
        "status" : "failed",
        "statusDetails" : "AssertionError: Value disk db used(MB) should be more than 0.\nassert 0 > 0\n +  where 0 = int(0)",
        "time" : {
          "start" : 1712605592714,
          "stop" : 1712605686404,
          "duration" : 93690
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8dbe1951caf9546e.json",
  "parameterValues" : [ ]
}