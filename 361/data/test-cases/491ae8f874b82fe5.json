{
  "uid" : "491ae8f874b82fe5",
  "name" : "POST delete_container",
  "fullName" : "tests_api.test_bd.TestPOST#test_delete_container",
  "historyId" : "f292c4cfa0c4b2dd77724aada1d3db8c",
  "time" : {
    "start" : 1743990249250,
    "stop" : 1743990249538,
    "duration" : 288
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7efd3b22a960>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7efd39e50e60>\n\n    @allure.title('POST delete_container')\n    def test_delete_container(self):\n>       result = API.post_delete_docker_container(\n            token=TestPOST.token,\n            list_index=-1)\n\ntests_api/test_bd.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:729: in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7efd3b22a960>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7efd39e50e60>\n\n    @allure.title('POST delete_container')\n    def test_delete_container(self):\n>       result = API.post_delete_docker_container(\n            token=TestPOST.token,\n            list_index=-1)\n\ntests_api/test_bd.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:729: in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "post_delete_docker_container",
      "time" : {
        "start" : 1743990249250,
        "stop" : 1743990249538,
        "duration" : 288
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 729, in post_delete_docker_container\n    docker_uuid = list(result_list.json()['data'])[list_index]\n                       ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "post_container_list",
        "time" : {
          "start" : 1743990249250,
          "stop" : 1743990249538,
          "duration" : 288
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Endpoint: /container_list",
          "time" : {
            "start" : 1743990249538,
            "stop" : 1743990249538,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Request:",
          "time" : {
            "start" : 1743990249538,
            "stop" : 1743990249538,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
            "time" : {
              "start" : 1743990249538,
              "stop" : 1743990249538,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          }, {
            "name" : "Body: None",
            "time" : {
              "start" : 1743990249538,
              "stop" : 1743990249538,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 2,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        }, {
          "name" : "Response:",
          "time" : {
            "start" : 1743990249538,
            "stop" : 1743990249538,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Status code: 502",
            "time" : {
              "start" : 1743990249538,
              "stop" : 1743990249538,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          }, {
            "name" : "JSON: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
            "time" : {
              "start" : 1743990249538,
              "stop" : 1743990249538,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 2,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 7,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 8,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 9,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az2029-252"
  }, {
    "name" : "thread",
    "value" : "2459-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 223,
        "broken" : 16,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 239
      },
      "items" : [ {
        "uid" : "a5350da8950830d4",
        "reportUrl" : "https://Areso.github.io/Oblache/360//#testresult/a5350da8950830d4",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1743903979656,
          "stop" : 1743903980252,
          "duration" : 596
        }
      }, {
        "uid" : "c2182021ad8d9de",
        "reportUrl" : "https://Areso.github.io/Oblache/359//#testresult/c2182021ad8d9de",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1743817164220,
          "stop" : 1743817185143,
          "duration" : 20923
        }
      }, {
        "uid" : "18b3fcad2b3f74a3",
        "reportUrl" : "https://Areso.github.io/Oblache/358//#testresult/18b3fcad2b3f74a3",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1743730850412,
          "stop" : 1743730871424,
          "duration" : 21012
        }
      }, {
        "uid" : "77e3440de6d08cf0",
        "reportUrl" : "https://Areso.github.io/Oblache/357//#testresult/77e3440de6d08cf0",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1743644479393,
          "stop" : 1743644500897,
          "duration" : 21504
        }
      }, {
        "uid" : "60b1c0a9489855e7",
        "reportUrl" : "https://Areso.github.io/Oblache/356//#testresult/60b1c0a9489855e7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1743558144650,
          "stop" : 1743558165582,
          "duration" : 20932
        }
      }, {
        "uid" : "855cf28a8412034f",
        "reportUrl" : "https://Areso.github.io/Oblache/355//#testresult/855cf28a8412034f",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1743472329629,
          "stop" : 1743472351142,
          "duration" : 21513
        }
      }, {
        "uid" : "85da70e9598d870",
        "reportUrl" : "https://Areso.github.io/Oblache/354//#testresult/85da70e9598d870",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1743385568976,
          "stop" : 1743385590458,
          "duration" : 21482
        }
      }, {
        "uid" : "88bf5a2db7432a61",
        "reportUrl" : "https://Areso.github.io/Oblache/353//#testresult/88bf5a2db7432a61",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1743299265732,
          "stop" : 1743299287273,
          "duration" : 21541
        }
      }, {
        "uid" : "767f3088e92084f7",
        "reportUrl" : "https://Areso.github.io/Oblache/352//#testresult/767f3088e92084f7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1743212364991,
          "stop" : 1743212385920,
          "duration" : 20929
        }
      }, {
        "uid" : "d1a34e3cc11b3fc4",
        "reportUrl" : "https://Areso.github.io/Oblache/351//#testresult/d1a34e3cc11b3fc4",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1743126029368,
          "stop" : 1743126050358,
          "duration" : 20990
        }
      }, {
        "uid" : "51aba2824d01a1c5",
        "reportUrl" : "https://Areso.github.io/Oblache/350//#testresult/51aba2824d01a1c5",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1743039611124,
          "stop" : 1743039632071,
          "duration" : 20947
        }
      }, {
        "uid" : "291050c4e8058187",
        "reportUrl" : "https://Areso.github.io/Oblache/349//#testresult/291050c4e8058187",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1742953250054,
          "stop" : 1742953271552,
          "duration" : 21498
        }
      }, {
        "uid" : "d016b5c6806bf352",
        "reportUrl" : "https://Areso.github.io/Oblache/348//#testresult/d016b5c6806bf352",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1742866869093,
          "stop" : 1742866890019,
          "duration" : 20926
        }
      }, {
        "uid" : "dcd38167308afe7",
        "reportUrl" : "https://Areso.github.io/Oblache/347//#testresult/dcd38167308afe7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1742780596686,
          "stop" : 1742780617766,
          "duration" : 21080
        }
      }, {
        "uid" : "b233539ea295d96b",
        "reportUrl" : "https://Areso.github.io/Oblache/346//#testresult/b233539ea295d96b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1742694306289,
          "stop" : 1742694327173,
          "duration" : 20884
        }
      }, {
        "uid" : "e283a5211af1bbfb",
        "reportUrl" : "https://Areso.github.io/Oblache/345//#testresult/e283a5211af1bbfb",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1742607479117,
          "stop" : 1742607500044,
          "duration" : 20927
        }
      }, {
        "uid" : "87e52f0ccee1657e",
        "reportUrl" : "https://Areso.github.io/Oblache/344//#testresult/87e52f0ccee1657e",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1742521229040,
          "stop" : 1742521250134,
          "duration" : 21094
        }
      }, {
        "uid" : "c2c96907e24bc80f",
        "reportUrl" : "https://Areso.github.io/Oblache/343//#testresult/c2c96907e24bc80f",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1742434730003,
          "stop" : 1742434750934,
          "duration" : 20931
        }
      }, {
        "uid" : "9d7df9b24ce0f132",
        "reportUrl" : "https://Areso.github.io/Oblache/342//#testresult/9d7df9b24ce0f132",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1742348396903,
          "stop" : 1742348417828,
          "duration" : 20925
        }
      }, {
        "uid" : "5fe24f16e2502179",
        "reportUrl" : "https://Areso.github.io/Oblache/341//#testresult/5fe24f16e2502179",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1742261976567,
          "stop" : 1742261997513,
          "duration" : 20946
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "491ae8f874b82fe5.json",
  "parameterValues" : [ ]
}