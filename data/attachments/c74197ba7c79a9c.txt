https://dbend.areso.pro/list_dbversions
<!doctype html>
<html lang=en>
  <head>
    <title>mysql.connector.errors.ProgrammingError: 1054 (42S22): Unknown column &#39;id_version&#39; in &#39;field list&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "0ucyN7OMfjP2TC1gsS9Y";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>ProgrammingError</h1>
<div class="detail">
  <p class="errormsg">mysql.connector.errors.ProgrammingError: 1054 (42S22): Unknown column &#39;id_version&#39; in &#39;field list&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140364851592576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/mysql/connector/connection_cext.py"</cite>,
      line <em class="line">639</em>,
      in <code class="function">cmd_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if raw is None:</pre>
<pre class="line before"><span class="ws">            </span>raw = self._raw</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>if not isinstance(query, bytes):</pre>
<pre class="line before"><span class="ws">                </span>query = query.encode(&#34;utf-8&#34;)</pre>
<pre class="line current"><span class="ws">            </span>self._cmysql.query(</pre>
<pre class="line after"><span class="ws">                </span>query,</pre>
<pre class="line after"><span class="ws">                </span>raw=raw,</pre>
<pre class="line after"><span class="ws">                </span>buffered=buffered,</pre>
<pre class="line after"><span class="ws">                </span>raw_as_string=raw_as_string,</pre>
<pre class="line after"><span class="ws">                </span>query_attrs=self.query_attrs,</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-140364851591792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1478</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140364851591568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1458</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140364851591680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask_cors/extension.py"</cite>,
      line <em class="line">176</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-140364877564720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask_restx/api.py"</cite>,
      line <em class="line">671</em>,
      in <code class="function">error_router</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line before"><span class="ws">            </span>except Exception as f:</pre>
<pre class="line current"><span class="ws">                </span>return original_handler(f)</pre>
<pre class="line after"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _propagate_exceptions(self):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration</pre></div>
</div>

<li><div class="frame" id="frame-140364877564160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask_restx/api.py"</cite>,
      line <em class="line">669</em>,
      in <code class="function">error_router</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param function original_handler: the original Flask error handler for the app</pre>
<pre class="line before"><span class="ws">        </span>:param Exception e: the exception raised while handling the request</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line after"><span class="ws">            </span>except Exception as f:</pre>
<pre class="line after"><span class="ws">                </span>return original_handler(f)</pre>
<pre class="line after"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _propagate_exceptions(self):</pre></div>
</div>

<li><div class="frame" id="frame-140364877562592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1455</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140364877561920">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">869</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140364877577040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask_cors/extension.py"</cite>,
      line <em class="line">176</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-140364877566848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask_restx/api.py"</cite>,
      line <em class="line">671</em>,
      in <code class="function">error_router</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line before"><span class="ws">            </span>except Exception as f:</pre>
<pre class="line current"><span class="ws">                </span>return original_handler(f)</pre>
<pre class="line after"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _propagate_exceptions(self):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration</pre></div>
</div>

<li><div class="frame" id="frame-140364877567296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask_restx/api.py"</cite>,
      line <em class="line">669</em>,
      in <code class="function">error_router</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param function original_handler: the original Flask error handler for the app</pre>
<pre class="line before"><span class="ws">        </span>:param Exception e: the exception raised while handling the request</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line after"><span class="ws">            </span>except Exception as f:</pre>
<pre class="line after"><span class="ws">                </span>return original_handler(f)</pre>
<pre class="line after"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _propagate_exceptions(self):</pre></div>
</div>

<li><div class="frame" id="frame-140364877566400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">867</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140364877567072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">852</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140364877562704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask_restx/api.py"</cite>,
      line <em class="line">402</em>,
      in <code class="function">wrapper</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param resource: The resource as a flask view function</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>@wraps(resource)</pre>
<pre class="line before"><span class="ws">        </span>def wrapper(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">            </span>resp = resource(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(resp, BaseResponse):</pre>
<pre class="line after"><span class="ws">                </span>return resp</pre>
<pre class="line after"><span class="ws">            </span>data, code, headers = unpack(resp)</pre>
<pre class="line after"><span class="ws">            </span>return self.make_response(data, code, headers=headers)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140364851592128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/views.py"</cite>,
      line <em class="line">109</em>,
      in <code class="function">view</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def view(**kwargs: t.Any) -&gt; ft.ResponseReturnValue:</pre>
<pre class="line before"><span class="ws">                </span>self = view.view_class(  # type: ignore[attr-defined]</pre>
<pre class="line before"><span class="ws">                    </span>*class_args, **class_kwargs</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line current"><span class="ws">                </span>return current_app.ensure_sync(self.dispatch_request)(**kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self = cls(*class_args, **class_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>def view(**kwargs: t.Any) -&gt; ft.ResponseReturnValue:</pre></div>
</div>

<li><div class="frame" id="frame-140364851591344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask_restx/resource.py"</cite>,
      line <em class="line">41</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>for decorator in self.method_decorators:</pre>
<pre class="line before"><span class="ws">            </span>meth = decorator(meth)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>self.validate_payload(meth)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>resp = meth(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if isinstance(resp, BaseResponse):</pre>
<pre class="line after"><span class="ws">            </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>representations = self.representations or {}</pre></div>
</div>

<li><div class="frame" id="frame-140364851591904">
  <h4>File <cite class="filename">"/root/git/dbaas/dbaas_backend/dbaas_backend.py"</cite>,
      line <em class="line">145</em>,
      in <code class="function">wrapped</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                </span>&#39;accept_langs&#39;: str(accepted_langs),</pre>
<pre class="line before"><span class="ws">                </span>&#39;uagent_langs&#39;: str(uagent_langs),</pre>
<pre class="line before"><span class="ws">                </span>&#39;id_acc&#39;: id_acc</pre>
<pre class="line before"><span class="ws">                </span>})</pre>
<pre class="line before"><span class="ws">            </span>db_connection.con.commit()</pre>
<pre class="line current"><span class="ws">            </span>ret = fn(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">            </span>return ret</pre>
<pre class="line after"><span class="ws">        </span>return wrapped</pre>
<pre class="line after"><span class="ws">    </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140364851592016">
  <h4>File <cite class="filename">"/root/git/dbaas/dbaas_backend/dbaas_backend.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">get</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>method_decorators = [register_call(&#39;list_dbversions&#39;)]</pre>
<pre class="line before"><span class="ws">    </span>def get(self):</pre>
<pre class="line before"><span class="ws">        </span>code    = 200</pre>
<pre class="line before"><span class="ws">        </span>global db_connection</pre>
<pre class="line before"><span class="ws">        </span>db_connection.con.ping(reconnect=True, attempts=1, delay=0)</pre>
<pre class="line current"><span class="ws">        </span>db_connection.cur.execute(&#34;&#34;&#34;SELECT id_version, db_type, db_version</pre>
<pre class="line after"><span class="ws">                                     </span>FROM db_versions dbv</pre>
<pre class="line after"><span class="ws">                                     </span>LEFT JOIN db_types dbt</pre>
<pre class="line after"><span class="ws">                                     </span>ON dbv.id_dbtype=dbt.id_dbtype</pre>
<pre class="line after"><span class="ws">                                     </span>WHERE dbv.is_enabled = 1</pre>
<pre class="line after"><span class="ws">                                     </span>AND dbt.is_enabled   = 1;&#34;&#34;&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-140364851592240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/mysql/connector/cursor_cext.py"</cite>,
      line <em class="line">330</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>raise ProgrammingError(</pre>
<pre class="line before"><span class="ws">                        </span>&#34;Not all parameters were used in the SQL statement&#34;</pre>
<pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>result = self._cnx.cmd_query(</pre>
<pre class="line after"><span class="ws">                </span>stmt,</pre>
<pre class="line after"><span class="ws">                </span>raw=self._raw,</pre>
<pre class="line after"><span class="ws">                </span>buffered=self._buffered,</pre>
<pre class="line after"><span class="ws">                </span>raw_as_string=self._raw_as_string,</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-140364851592352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/mysql/connector/opentelemetry/context_propagation.py"</cite>,
      line <em class="line">77</em>,
      in <code class="function">wrapper</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def wrapper(</pre>
<pre class="line before"><span class="ws">        </span>cnx: Union[&#34;MySQLConnection&#34;, &#34;CMySQLConnection&#34;], *args: Any, **kwargs: Any</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Any:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;Context propagation decorator.&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>if not OTEL_ENABLED or not cnx.otel_context_propagation:</pre>
<pre class="line current"><span class="ws">            </span>return method(cnx, *args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>current_span = trace.get_current_span()</pre>
<pre class="line after"><span class="ws">        </span>tp_header = None</pre>
<pre class="line after"><span class="ws">        </span>if current_span.is_recording():</pre>
<pre class="line after"><span class="ws">            </span>tp_header = build_traceparent_header(current_span)</pre></div>
</div>

<li><div class="frame" id="frame-140364851592464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/mysql/connector/connection_cext.py"</cite>,
      line <em class="line">647</em>,
      in <code class="function">cmd_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>buffered=buffered,</pre>
<pre class="line before"><span class="ws">                </span>raw_as_string=raw_as_string,</pre>
<pre class="line before"><span class="ws">                </span>query_attrs=self.query_attrs,</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws">        </span>except MySQLInterfaceError as err:</pre>
<pre class="line current"><span class="ws">            </span>raise get_mysql_exception(</pre>
<pre class="line after"><span class="ws">                </span>err.errno, msg=err.msg, sqlstate=err.sqlstate</pre>
<pre class="line after"><span class="ws">            </span>) from err</pre>
<pre class="line after"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line after"><span class="ws">            </span>addr = (</pre>
<pre class="line after"><span class="ws">                </span>self._unix_socket if self._unix_socket else f&#34;{self._host}:{self._port}&#34;</pre></div>
</div>
</ul>
  <blockquote>mysql.connector.errors.ProgrammingError: 1054 (42S22): Unknown column &#39;id_version&#39; in &#39;field list&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/mysql/connector/connection_cext.py&#34;, line 639, in cmd_query
    self._cmysql.query(
_mysql_connector.MySQLInterfaceError: Unknown column &#39;id_version&#39; in &#39;field list&#39;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1478, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1458, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask_cors/extension.py&#34;, line 176, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &#34;/usr/local/lib/python3.10/dist-packages/flask_restx/api.py&#34;, line 671, in error_router
    return original_handler(f)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask_restx/api.py&#34;, line 669, in error_router
    return self.handle_error(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1455, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 869, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask_cors/extension.py&#34;, line 176, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &#34;/usr/local/lib/python3.10/dist-packages/flask_restx/api.py&#34;, line 671, in error_router
    return original_handler(f)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask_restx/api.py&#34;, line 669, in error_router
    return self.handle_error(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 867, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 852, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask_restx/api.py&#34;, line 402, in wrapper
    resp = resource(*args, **kwargs)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/views.py&#34;, line 109, in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask_restx/resource.py&#34;, line 41, in dispatch_request
    resp = meth(*args, **kwargs)
  File &#34;/root/git/dbaas/dbaas_backend/dbaas_backend.py&#34;, line 145, in wrapped
    ret = fn(*args, **kwargs)
  File &#34;/root/git/dbaas/dbaas_backend/dbaas_backend.py&#34;, line 183, in get
    db_connection.cur.execute(&#34;&#34;&#34;SELECT id_version, db_type, db_version
  File &#34;/usr/local/lib/python3.10/dist-packages/mysql/connector/cursor_cext.py&#34;, line 330, in execute
    result = self._cnx.cmd_query(
  File &#34;/usr/local/lib/python3.10/dist-packages/mysql/connector/opentelemetry/context_propagation.py&#34;, line 77, in wrapper
    return method(cnx, *args, **kwargs)
  File &#34;/usr/local/lib/python3.10/dist-packages/mysql/connector/connection_cext.py&#34;, line 647, in cmd_query
    raise get_mysql_exception(
mysql.connector.errors.ProgrammingError: 1054 (42S22): Unknown column &#39;id_version&#39; in &#39;field list&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/mysql/connector/connection_cext.py", line 639, in cmd_query
    self._cmysql.query(
_mysql_connector.MySQLInterfaceError: Unknown column 'id_version' in 'field list'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1478, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1458, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask_cors/extension.py", line 176, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "/usr/local/lib/python3.10/dist-packages/flask_restx/api.py", line 671, in error_router
    return original_handler(f)
  File "/usr/local/lib/python3.10/dist-packages/flask_restx/api.py", line 669, in error_router
    return self.handle_error(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1455, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 869, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask_cors/extension.py", line 176, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "/usr/local/lib/python3.10/dist-packages/flask_restx/api.py", line 671, in error_router
    return original_handler(f)
  File "/usr/local/lib/python3.10/dist-packages/flask_restx/api.py", line 669, in error_router
    return self.handle_error(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 867, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 852, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File "/usr/local/lib/python3.10/dist-packages/flask_restx/api.py", line 402, in wrapper
    resp = resource(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/flask/views.py", line 109, in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)
  File "/usr/local/lib/python3.10/dist-packages/flask_restx/resource.py", line 41, in dispatch_request
    resp = meth(*args, **kwargs)
  File "/root/git/dbaas/dbaas_backend/dbaas_backend.py", line 145, in wrapped
    ret = fn(*args, **kwargs)
  File "/root/git/dbaas/dbaas_backend/dbaas_backend.py", line 183, in get
    db_connection.cur.execute("""SELECT id_version, db_type, db_version
  File "/usr/local/lib/python3.10/dist-packages/mysql/connector/cursor_cext.py", line 330, in execute
    result = self._cnx.cmd_query(
  File "/usr/local/lib/python3.10/dist-packages/mysql/connector/opentelemetry/context_propagation.py", line 77, in wrapper
    return method(cnx, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/mysql/connector/connection_cext.py", line 647, in cmd_query
    raise get_mysql_exception(
mysql.connector.errors.ProgrammingError: 1054 (42S22): Unknown column 'id_version' in 'field list'


-->

