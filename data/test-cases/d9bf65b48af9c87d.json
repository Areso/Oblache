{
  "uid" : "d9bf65b48af9c87d",
  "name" : "Post registration",
  "fullName" : "tests.test_bd.TestPOST#test_post_registration",
  "historyId" : "2a65ea35f5f222c4de1aaf9f487f0bf6",
  "time" : {
    "start" : 1707346504526,
    "stop" : 1707346504898,
    "duration" : 372
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nAssertionError: Incorrect status code",
  "statusTrace" : "self = <tests.test_bd.TestPOST object at 0x7f45f5f120b0>\n\n    @pytest.mark.xfail()\n    @allure.title('Post registration')\n    def test_post_registration(self):\n        print('\\n\\nMethod POST: registration')\n        result_post = API.post_registration()\n        status_code = result_post\n>       Checking.check_status_code(status_code, 201)\n\ntests/test_bd.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 201\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response JSON\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, 'Incorrect status code'\nE           AssertionError: Incorrect status code\n\nutils/checking.py:18: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nAssertionError: Incorrect status code",
    "statusTrace" : "self = <tests.test_bd.TestPOST object at 0x7f45f5f120b0>\n\n    @pytest.mark.xfail()\n    @allure.title('Post registration')\n    def test_post_registration(self):\n        print('\\n\\nMethod POST: registration')\n        result_post = API.post_registration()\n        status_code = result_post\n>       Checking.check_status_code(status_code, 201)\n\ntests/test_bd.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 201\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response JSON\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, 'Incorrect status code'\nE           AssertionError: Incorrect status code\n\nutils/checking.py:18: AssertionError",
    "steps" : [ {
      "name" : "POST https://dbend.areso.pro/register",
      "time" : {
        "start" : 1707346504526,
        "stop" : 1707346504526,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Status code: 400",
      "time" : {
        "start" : 1707346504898,
        "stop" : 1707346504898,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Params url: https://dbend.areso.pro/register",
      "time" : {
        "start" : 1707346504898,
        "stop" : 1707346504898,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Response: <Response [400]>",
      "time" : {
        "start" : 1707346504898,
        "stop" : 1707346504898,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Assert status code: 201 == Response status code: 400",
      "time" : {
        "start" : 1707346504898,
        "stop" : 1707346504898,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Incorrect status code\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/utils/checking.py\", line 18, in check_status_code\n    assert status_code == result.status_code, 'Incorrect status code'\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 5,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "POST REQUESTS"
  }, {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az840-616"
  }, {
    "name" : "thread",
    "value" : "1769-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 0,
        "skipped" : 25,
        "passed" : 0,
        "unknown" : 0,
        "total" : 25
      },
      "items" : [ {
        "uid" : "aed993ec3ddb841e",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707337134524,
          "stop" : 1707337135040,
          "duration" : 516
        }
      }, {
        "uid" : "66b345a62add1bcb",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707265564684,
          "stop" : 1707265565203,
          "duration" : 519
        }
      }, {
        "uid" : "f36b6d4085892eb4",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707265331759,
          "stop" : 1707265332125,
          "duration" : 366
        }
      }, {
        "uid" : "fba85d982676e670",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707165510831,
          "stop" : 1707165511198,
          "duration" : 367
        }
      }, {
        "uid" : "4ff663262cbd7019",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707164098869,
          "stop" : 1707164099373,
          "duration" : 504
        }
      }, {
        "uid" : "2d8318b74d274a43",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707158598916,
          "stop" : 1707158599434,
          "duration" : 518
        }
      }, {
        "uid" : "f1ffe3daac33d2d",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707158016887,
          "stop" : 1707158017213,
          "duration" : 326
        }
      }, {
        "uid" : "7fe41d0e6f8cadc7",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707157331214,
          "stop" : 1707157331552,
          "duration" : 338
        }
      }, {
        "uid" : "2ea06d649f0a0eac",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707155862342,
          "stop" : 1707155862857,
          "duration" : 515
        }
      }, {
        "uid" : "9e6c9c8220509a75",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707151835678,
          "stop" : 1707151835996,
          "duration" : 318
        }
      }, {
        "uid" : "47660a7b883b8c35",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707151280046,
          "stop" : 1707151280371,
          "duration" : 325
        }
      }, {
        "uid" : "214e86da51f02949",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707148755994,
          "stop" : 1707148756524,
          "duration" : 530
        }
      }, {
        "uid" : "774be6480944f889",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707069603185,
          "stop" : 1707069603734,
          "duration" : 549
        }
      }, {
        "uid" : "a27a102e32028160",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707069363859,
          "stop" : 1707069364232,
          "duration" : 373
        }
      }, {
        "uid" : "ffa83eaafa0105f2",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707068499920,
          "stop" : 1707068500252,
          "duration" : 332
        }
      }, {
        "uid" : "3f6e4632f9dc6a0d",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707067410587,
          "stop" : 1707067411107,
          "duration" : 520
        }
      }, {
        "uid" : "b871c186ce620e20",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1706811865430,
          "stop" : 1706811865777,
          "duration" : 347
        }
      }, {
        "uid" : "fa1fbbf5fae9d630",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1706810640297,
          "stop" : 1706810640631,
          "duration" : 334
        }
      }, {
        "uid" : "b7e9c6cd49eaef9a",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1706729025829,
          "stop" : 1706729026188,
          "duration" : 359
        }
      }, {
        "uid" : "6c987ac1da10334f",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1706630866256,
          "stop" : 1706630866589,
          "duration" : 333
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "d9bf65b48af9c87d.json",
  "parameterValues" : [ ]
}