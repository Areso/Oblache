{
  "uid" : "80876f272141ef74",
  "name" : "delete db",
  "fullName" : "tests.test_bd.TestPOST#test_delete_db",
  "historyId" : "6b562f8bf571af52594cf0d13d8f83e3",
  "time" : {
    "start" : 1707265337097,
    "stop" : 1707265337930,
    "duration" : 833
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nAssertionError: Incorrect status code",
  "statusTrace" : "self = <tests.test_bd.TestPOST object at 0x7f256db102b0>\n\n    @allure.title('delete db')\n    @pytest.mark.xfail()\n    def test_delete_db(self):\n        print('\\n\\nMethod DELETE: delete_db')\n        list_db = API.post_db_list(TestData.sid)\n        json_list_db = json.loads(list_db.text)\n        try:\n            first_db_uuid = list(json_list_db['content'].keys())[0]\n            result_post_db_delete = API.delete_db(first_db_uuid, TestData.sid)\n>           Checking.check_status_code(result_post_db_delete, 200)\n\ntests/test_bd.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response JSON\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, 'Incorrect status code'\nE           AssertionError: Incorrect status code\n\nutils/checking.py:18: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nAssertionError: Incorrect status code",
    "statusTrace" : "self = <tests.test_bd.TestPOST object at 0x7f256db102b0>\n\n    @allure.title('delete db')\n    @pytest.mark.xfail()\n    def test_delete_db(self):\n        print('\\n\\nMethod DELETE: delete_db')\n        list_db = API.post_db_list(TestData.sid)\n        json_list_db = json.loads(list_db.text)\n        try:\n            first_db_uuid = list(json_list_db['content'].keys())[0]\n            result_post_db_delete = API.delete_db(first_db_uuid, TestData.sid)\n>           Checking.check_status_code(result_post_db_delete, 200)\n\ntests/test_bd.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response JSON\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, 'Incorrect status code'\nE           AssertionError: Incorrect status code\n\nutils/checking.py:18: AssertionError",
    "steps" : [ {
      "name" : "POST https://dbend.areso.pro/db_list",
      "time" : {
        "start" : 1707265337097,
        "stop" : 1707265337097,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Status code: 200",
      "time" : {
        "start" : 1707265337511,
        "stop" : 1707265337511,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Params url: https://dbend.areso.pro/db_list",
      "time" : {
        "start" : 1707265337511,
        "stop" : 1707265337511,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Response: <Response [200]>",
      "time" : {
        "start" : 1707265337511,
        "stop" : 1707265337511,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "DELETE https://dbend.areso.pro/db_delete",
      "time" : {
        "start" : 1707265337511,
        "stop" : 1707265337512,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Db uuid is: {'db_uuid': '065c2ccf-2e9d-7c60-8000-64543247fe6c'}",
      "time" : {
        "start" : 1707265337512,
        "stop" : 1707265337512,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Status code: 400",
      "time" : {
        "start" : 1707265337929,
        "stop" : 1707265337929,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Params url: https://dbend.areso.pro/db_delete",
      "time" : {
        "start" : 1707265337929,
        "stop" : 1707265337929,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Response: <Response [400]>",
      "time" : {
        "start" : 1707265337929,
        "stop" : 1707265337929,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Assert status code: 200 == Response status code: 400",
      "time" : {
        "start" : 1707265337930,
        "stop" : 1707265337930,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Incorrect status code\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/utils/checking.py\", line 18, in check_status_code\n    assert status_code == result.status_code, 'Incorrect status code'\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 10,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "POST REQUESTS"
  }, {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az973-3"
  }, {
    "name" : "thread",
    "value" : "1773-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 0,
        "skipped" : 4,
        "passed" : 18,
        "unknown" : 0,
        "total" : 22
      },
      "items" : [ {
        "uid" : "a75d447b4e4357ce",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707165515871,
          "stop" : 1707165516640,
          "duration" : 769
        }
      }, {
        "uid" : "2041c5b6517eb878",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707164105851,
          "stop" : 1707164106931,
          "duration" : 1080
        }
      }, {
        "uid" : "eb3ce78c91ab0f0b",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707158605870,
          "stop" : 1707158606946,
          "duration" : 1076
        }
      }, {
        "uid" : "192c254b1cb1aefd",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707158021227,
          "stop" : 1707158022014,
          "duration" : 787
        }
      }, {
        "uid" : "f2593fdb6371509f",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707157332547,
          "stop" : 1707157333339,
          "duration" : 792
        }
      }, {
        "uid" : "6221aaa86b6185bf",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707155869384,
          "stop" : 1707155870454,
          "duration" : 1070
        }
      }, {
        "uid" : "1b314d127f025bea",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707151839867,
          "stop" : 1707151840522,
          "duration" : 655
        }
      }, {
        "uid" : "779b21efb80e601e",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707151284379,
          "stop" : 1707151285070,
          "duration" : 691
        }
      }, {
        "uid" : "f9d6b2ea49b7ef5",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707148762854,
          "stop" : 1707148763936,
          "duration" : 1082
        }
      }, {
        "uid" : "57537abb5118c2c3",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707069610093,
          "stop" : 1707069611180,
          "duration" : 1087
        }
      }, {
        "uid" : "1875d5d14afcc981",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707069368271,
          "stop" : 1707069368935,
          "duration" : 664
        }
      }, {
        "uid" : "75c4750b5b48f262",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1707068504390,
          "stop" : 1707068505038,
          "duration" : 648
        }
      }, {
        "uid" : "f21bb0bce494d130",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1707067417412,
          "stop" : 1707067418467,
          "duration" : 1055
        }
      }, {
        "uid" : "47d098ca190981f",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1706811870015,
          "stop" : 1706811870707,
          "duration" : 692
        }
      }, {
        "uid" : "f392bbff791bcfb8",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1706810644211,
          "stop" : 1706810645005,
          "duration" : 794
        }
      }, {
        "uid" : "d99838c17042ff71",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1706729030501,
          "stop" : 1706729031238,
          "duration" : 737
        }
      }, {
        "uid" : "519f2753fbcf1346",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Incorrect status code",
        "time" : {
          "start" : 1706630869753,
          "stop" : 1706630870399,
          "duration" : 646
        }
      }, {
        "uid" : "b71c5bfb4d1f4711",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1706630300187,
          "stop" : 1706630300570,
          "duration" : 383
        }
      }, {
        "uid" : "bb8d4c6a3d5aa5bd",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1706630061520,
          "stop" : 1706630061909,
          "duration" : 389
        }
      }, {
        "uid" : "2e6ca177dd6f0519",
        "status" : "passed",
        "statusDetails" : "XPASS",
        "time" : {
          "start" : 1706484251724,
          "stop" : 1706484252111,
          "duration" : 387
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "80876f272141ef74.json",
  "parameterValues" : [ ]
}