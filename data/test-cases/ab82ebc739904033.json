{
  "uid" : "ab82ebc739904033",
  "name" : "Bad request.",
  "fullName" : "tests_api.test_bd.TestGET#test_get_with_bad_request",
  "historyId" : "5156f5dedc3d46e33a62122a588c6956",
  "time" : {
    "start" : 1710086215739,
    "stop" : 1710086216035,
    "duration" : 296
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Incorrect status code",
  "statusTrace" : "self = <tests_api.test_bd.TestGET object at 0x7ff2f21d2c20>\n\n    @allure.title('Bad request.')\n    def test_get_with_bad_request(self):\n        result_get = API.get_bad_request()\n>       Checking.check_status_code(result_get, 404)\n\ntests_api/test_bd.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [502]>, status_code = 404\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response JSON\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, 'Incorrect status code'\nE           AssertionError: Incorrect status code\n\ntests_api/utils/checking.py:18: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Incorrect status code",
    "statusTrace" : "self = <tests_api.test_bd.TestGET object at 0x7ff2f21d2c20>\n\n    @allure.title('Bad request.')\n    def test_get_with_bad_request(self):\n        result_get = API.get_bad_request()\n>       Checking.check_status_code(result_get, 404)\n\ntests_api/test_bd.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [502]>, status_code = 404\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response JSON\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, 'Incorrect status code'\nE           AssertionError: Incorrect status code\n\ntests_api/utils/checking.py:18: AssertionError",
    "steps" : [ {
      "name" : "get_bad_request",
      "time" : {
        "start" : 1710086215739,
        "stop" : 1710086216035,
        "duration" : 296
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "GET https://dbend.areso.pro/bad_request",
        "time" : {
          "start" : 1710086215739,
          "stop" : 1710086216034,
          "duration" : 295
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Status code: 502",
          "time" : {
            "start" : 1710086216034,
            "stop" : 1710086216034,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "stepsCount" : 0,
          "hasContent" : false
        }, {
          "name" : "Response: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
          "time" : {
            "start" : 1710086216034,
            "stop" : 1710086216034,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "stepsCount" : 0,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 2,
        "hasContent" : true
      }, {
        "name" : "Response JSON: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
        "time" : {
          "start" : 1710086216034,
          "stop" : 1710086216034,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 4,
      "hasContent" : true
    }, {
      "name" : "Assert status code: 404 == Response status code: 502",
      "time" : {
        "start" : 1710086216035,
        "stop" : 1710086216035,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Incorrect status code\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/checking.py\", line 18, in check_status_code\n    assert status_code == result.status_code, 'Incorrect status code'\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 6,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "GET"
  }, {
    "name" : "epic",
    "value" : "GET REQUESTS"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestGET"
  }, {
    "name" : "host",
    "value" : "fv-az1542-603"
  }, {
    "name" : "thread",
    "value" : "1804-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 12,
        "unknown" : 0,
        "total" : 14
      },
      "items" : [ {
        "uid" : "ec4f57be257bc3a8",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code",
        "time" : {
          "start" : 1710085909356,
          "stop" : 1710085909676,
          "duration" : 320
        }
      }, {
        "uid" : "5d85953922b5b773",
        "status" : "passed",
        "time" : {
          "start" : 1709754044205,
          "stop" : 1709754044564,
          "duration" : 359
        }
      }, {
        "uid" : "f02110ba0e18154c",
        "status" : "passed",
        "time" : {
          "start" : 1709070970005,
          "stop" : 1709070970524,
          "duration" : 519
        }
      }, {
        "uid" : "6656be188d1eb266",
        "status" : "passed",
        "time" : {
          "start" : 1709068079057,
          "stop" : 1709068079381,
          "duration" : 324
        }
      }, {
        "uid" : "ac96310845f8e8c2",
        "status" : "passed",
        "time" : {
          "start" : 1709064646320,
          "stop" : 1709064646630,
          "duration" : 310
        }
      }, {
        "uid" : "32686ee3d9060b4c",
        "status" : "passed",
        "time" : {
          "start" : 1709054409957,
          "stop" : 1709054410266,
          "duration" : 309
        }
      }, {
        "uid" : "a029e5dee2b8494a",
        "status" : "passed",
        "time" : {
          "start" : 1708977153972,
          "stop" : 1708977154273,
          "duration" : 301
        }
      }, {
        "uid" : "9964e5295d098176",
        "status" : "passed",
        "time" : {
          "start" : 1708882312158,
          "stop" : 1708882312483,
          "duration" : 325
        }
      }, {
        "uid" : "21aa47336ab937c7",
        "status" : "passed",
        "time" : {
          "start" : 1708876666528,
          "stop" : 1708876666829,
          "duration" : 301
        }
      }, {
        "uid" : "47da4408c468e007",
        "status" : "passed",
        "time" : {
          "start" : 1708032430626,
          "stop" : 1708032431123,
          "duration" : 497
        }
      }, {
        "uid" : "863e5c7ac6cfe672",
        "status" : "passed",
        "time" : {
          "start" : 1708031925122,
          "stop" : 1708031925626,
          "duration" : 504
        }
      }, {
        "uid" : "b311cf20f9f5088c",
        "status" : "passed",
        "time" : {
          "start" : 1708028402244,
          "stop" : 1708028402610,
          "duration" : 366
        }
      }, {
        "uid" : "530639fe2d3cfd1c",
        "status" : "passed",
        "time" : {
          "start" : 1707696102034,
          "stop" : 1707696102524,
          "duration" : 490
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "ab82ebc739904033.json",
  "parameterValues" : [ ]
}