{
  "uid" : "1ddbb496c774999",
  "name" : "Bad request.",
  "fullName" : "tests.test_bd.TestGET#test_get_with_bad_request",
  "historyId" : "881eb2ea92534fd9494bec4be18a1001",
  "time" : {
    "start" : 1707684208955,
    "stop" : 1707684209327,
    "duration" : 372
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc3236854b0>\ns = 'Some general exception', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_bd.TestGET object at 0x7fc321b10610>\n\n    @allure.title('Bad request.')\n    def test_get_with_bad_request(self):\n>       result_get = API.get_bad_request()\n\ntests/test_bd.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/request.py:108: in get_bad_request\n    result_get = HttpMethods.get(get_url)\nutils/http_methods.py:23: in get\n    with allure.step(f'Response: {result.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc3236854b0>\ns = 'Some general exception', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_bd.TestGET object at 0x7fc321b10610>\n\n    @allure.title('Bad request.')\n    def test_get_with_bad_request(self):\n>       result_get = API.get_bad_request()\n\ntests/test_bd.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/request.py:108: in get_bad_request\n    result_get = HttpMethods.get(get_url)\nutils/http_methods.py:23: in get\n    with allure.step(f'Response: {result.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "get_bad_request",
      "time" : {
        "start" : 1707684208955,
        "stop" : 1707684209313,
        "duration" : 358
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Oblache/Oblache/utils/request.py\", line 108, in get_bad_request\n    result_get = HttpMethods.get(get_url)\n  File \"/home/runner/work/Oblache/Oblache/utils/http_methods.py\", line 23, in get\n    with allure.step(f'Response: {result.json()}'):\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "GET https://dbend.areso.pro/bad_request",
        "time" : {
          "start" : 1707684208955,
          "stop" : 1707684208955,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      }, {
        "name" : "Status code: 404",
        "time" : {
          "start" : 1707684209313,
          "stop" : 1707684209313,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 2,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "GET REQUESTS"
  }, {
    "name" : "suite",
    "value" : "GET"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "subSuite",
    "value" : "TestGET"
  }, {
    "name" : "host",
    "value" : "fv-az692-190"
  }, {
    "name" : "thread",
    "value" : "1774-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 28,
        "unknown" : 0,
        "total" : 29
      },
      "items" : [ {
        "uid" : "59ca32e2031bafcc",
        "status" : "passed",
        "time" : {
          "start" : 1707683172053,
          "stop" : 1707683172559,
          "duration" : 506
        }
      }, {
        "uid" : "75b6c2a1134007de",
        "status" : "passed",
        "time" : {
          "start" : 1707681001940,
          "stop" : 1707681002257,
          "duration" : 317
        }
      }, {
        "uid" : "2e6af9abf6d1571a",
        "status" : "passed",
        "time" : {
          "start" : 1707679320048,
          "stop" : 1707679320360,
          "duration" : 312
        }
      }, {
        "uid" : "c13bbaa0f569e290",
        "status" : "passed",
        "time" : {
          "start" : 1707673539198,
          "stop" : 1707673539505,
          "duration" : 307
        }
      }, {
        "uid" : "e08c50efa4bc2b4c",
        "status" : "passed",
        "time" : {
          "start" : 1707608817380,
          "stop" : 1707608817887,
          "duration" : 507
        }
      }, {
        "uid" : "d97457e12858e6cd",
        "status" : "passed",
        "time" : {
          "start" : 1707437710268,
          "stop" : 1707437710780,
          "duration" : 512
        }
      }, {
        "uid" : "637704bbb9ab6302",
        "status" : "passed",
        "time" : {
          "start" : 1707436439662,
          "stop" : 1707436440177,
          "duration" : 515
        }
      }, {
        "uid" : "980c1e1803ae85bc",
        "status" : "passed",
        "time" : {
          "start" : 1707430238780,
          "stop" : 1707430239132,
          "duration" : 352
        }
      }, {
        "uid" : "d8f63507367ca231",
        "status" : "passed",
        "time" : {
          "start" : 1707392874630,
          "stop" : 1707392875007,
          "duration" : 377
        }
      }, {
        "uid" : "4f94774c29ac56f8",
        "status" : "passed",
        "time" : {
          "start" : 1707392536675,
          "stop" : 1707392536986,
          "duration" : 311
        }
      }, {
        "uid" : "3754f767920d7862",
        "status" : "passed",
        "time" : {
          "start" : 1707348728517,
          "stop" : 1707348728878,
          "duration" : 361
        }
      }, {
        "uid" : "9aff12513467d36d",
        "status" : "passed",
        "time" : {
          "start" : 1707348477268,
          "stop" : 1707348477580,
          "duration" : 312
        }
      }, {
        "uid" : "670c377d6b780591",
        "status" : "passed",
        "time" : {
          "start" : 1707346503805,
          "stop" : 1707346504160,
          "duration" : 355
        }
      }, {
        "uid" : "12426156423122de",
        "status" : "passed",
        "time" : {
          "start" : 1707337133463,
          "stop" : 1707337133993,
          "duration" : 530
        }
      }, {
        "uid" : "3704d93cc526176d",
        "status" : "passed",
        "time" : {
          "start" : 1707265563669,
          "stop" : 1707265564168,
          "duration" : 499
        }
      }, {
        "uid" : "79924630ec220e2e",
        "status" : "passed",
        "time" : {
          "start" : 1707265331040,
          "stop" : 1707265331394,
          "duration" : 354
        }
      }, {
        "uid" : "b7b1070e4c01d208",
        "status" : "passed",
        "time" : {
          "start" : 1707165510098,
          "stop" : 1707165510465,
          "duration" : 367
        }
      }, {
        "uid" : "bba4867a82a592a4",
        "status" : "passed",
        "time" : {
          "start" : 1707164097849,
          "stop" : 1707164098358,
          "duration" : 509
        }
      }, {
        "uid" : "ff5672e706bd090",
        "status" : "passed",
        "time" : {
          "start" : 1707158597878,
          "stop" : 1707158598393,
          "duration" : 515
        }
      }, {
        "uid" : "7826bbed4a240c28",
        "status" : "passed",
        "time" : {
          "start" : 1707158016247,
          "stop" : 1707158016559,
          "duration" : 312
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "1ddbb496c774999.json",
  "parameterValues" : [ ]
}