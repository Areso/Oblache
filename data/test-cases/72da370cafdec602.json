{
  "uid" : "72da370cafdec602",
  "name" : "Post db list with filter",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_db_list_with_filter",
  "historyId" : "1404cf75602dc5c195df0f6e9ffb5ba3",
  "time" : {
    "start" : 1708876671034,
    "stop" : 1708876671736,
    "duration" : 702
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Incorrect status code",
  "statusTrace" : "self = <tests_api.test_bd.TestPOST object at 0x7f9a2060abc0>\n\n    @allure.title('Post db list with filter')\n    def test_post_db_list_with_filter(self):\n        print('\\n\\nMethod POST: db_list_with_filter')\n        list_db = API.post_db_list(TestData.token)\n        json_list_db = list_db.json()\n        try:\n            first_db_uuid = list(json_list_db['data'])[-1]\n            print('first_db_uuid', first_db_uuid)\n            result_post_db_list = API.delete_db(first_db_uuid, TestData.token)\n>           Checking.check_status_code(result_post_db_list, 200)\n\ntests_api/test_bd.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response JSON\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, 'Incorrect status code'\nE           AssertionError: Incorrect status code\n\ntests_api/utils/checking.py:18: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Incorrect status code",
    "statusTrace" : "self = <tests_api.test_bd.TestPOST object at 0x7f9a2060abc0>\n\n    @allure.title('Post db list with filter')\n    def test_post_db_list_with_filter(self):\n        print('\\n\\nMethod POST: db_list_with_filter')\n        list_db = API.post_db_list(TestData.token)\n        json_list_db = list_db.json()\n        try:\n            first_db_uuid = list(json_list_db['data'])[-1]\n            print('first_db_uuid', first_db_uuid)\n            result_post_db_list = API.delete_db(first_db_uuid, TestData.token)\n>           Checking.check_status_code(result_post_db_list, 200)\n\ntests_api/test_bd.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [400]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response JSON\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, 'Incorrect status code'\nE           AssertionError: Incorrect status code\n\ntests_api/utils/checking.py:18: AssertionError",
    "steps" : [ {
      "name" : "post_db_list",
      "time" : {
        "start" : 1708876671034,
        "stop" : 1708876671428,
        "duration" : 394
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "POST https://dbend.areso.pro/db_list",
        "time" : {
          "start" : 1708876671034,
          "stop" : 1708876671034,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      }, {
        "name" : "Status code: 200",
        "time" : {
          "start" : 1708876671428,
          "stop" : 1708876671428,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      }, {
        "name" : "Params url: https://dbend.areso.pro/db_list",
        "time" : {
          "start" : 1708876671428,
          "stop" : 1708876671428,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      }, {
        "name" : "Response: <Response [200]>",
        "time" : {
          "start" : 1708876671428,
          "stop" : 1708876671428,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 4,
      "hasContent" : true
    }, {
      "name" : "delete_db",
      "time" : {
        "start" : 1708876671429,
        "stop" : 1708876671736,
        "duration" : 307
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "DELETE https://dbend.areso.pro/db_delete",
        "time" : {
          "start" : 1708876671429,
          "stop" : 1708876671429,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      }, {
        "name" : "Db uuid is: {'db_uuid': '065db637-884c-7056-8000-e6a011978ec7'}",
        "time" : {
          "start" : 1708876671429,
          "stop" : 1708876671429,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      }, {
        "name" : "Status code: 400",
        "time" : {
          "start" : 1708876671735,
          "stop" : 1708876671735,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      }, {
        "name" : "Params url: https://dbend.areso.pro/db_delete",
        "time" : {
          "start" : 1708876671735,
          "stop" : 1708876671735,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      }, {
        "name" : "Response: <Response [400]>",
        "time" : {
          "start" : 1708876671735,
          "stop" : 1708876671735,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 5,
      "hasContent" : true
    }, {
      "name" : "Assert status code: 200 == Response status code: 400",
      "time" : {
        "start" : 1708876671736,
        "stop" : 1708876671736,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Incorrect status code\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/checking.py\", line 18, in check_status_code\n    assert status_code == result.status_code, 'Incorrect status code'\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 12,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "POST REQUESTS"
  }, {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az665-41"
  }, {
    "name" : "thread",
    "value" : "1844-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 5
      },
      "items" : [ {
        "uid" : "7709aa3c4e771226",
        "status" : "broken",
        "statusDetails" : "TypeError: string indices must be integers",
        "time" : {
          "start" : 1708032437998,
          "stop" : 1708032438658,
          "duration" : 660
        }
      }, {
        "uid" : "988b2b2738df82bb",
        "status" : "broken",
        "statusDetails" : "TypeError: string indices must be integers",
        "time" : {
          "start" : 1708031932476,
          "stop" : 1708031933119,
          "duration" : 643
        }
      }, {
        "uid" : "8c240ebd117748be",
        "status" : "broken",
        "statusDetails" : "TypeError: string indices must be integers",
        "time" : {
          "start" : 1708028407393,
          "stop" : 1708028407849,
          "duration" : 456
        }
      }, {
        "uid" : "f7a61fdff35a37c",
        "status" : "broken",
        "statusDetails" : "TypeError: string indices must be integers",
        "time" : {
          "start" : 1707696108920,
          "stop" : 1707696109555,
          "duration" : 635
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "72da370cafdec602.json",
  "parameterValues" : [ ]
}