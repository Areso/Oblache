{
  "uid" : "66e450cc751e7ed8",
  "name" : "POST registration email is taken for en-us",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_registration_email_is_taken_for_en_en",
  "historyId" : "01089481a801c3ca1d24c8f43d47f1d3",
  "time" : {
    "start" : 1726535345924,
    "stop" : 1726535346397,
    "duration" : 473
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec3f2f2930>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7fec3e259970>\n\n    @allure.title('POST registration email is taken for en-us')\n    def test_post_registration_email_is_taken_for_en_en(self):\n>       response = API.post_registration(\n            email=TestPOST.email,\n            old_password=TestPOST.old_password,\n            language=\"en-us\",\n            tos_agree=True)\n\ntests_api/test_bd.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:324: in post_registration\n    with allure.step(f'JSON: {response.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec3f2f2930>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7fec3e259970>\n\n    @allure.title('POST registration email is taken for en-us')\n    def test_post_registration_email_is_taken_for_en_en(self):\n>       response = API.post_registration(\n            email=TestPOST.email,\n            old_password=TestPOST.old_password,\n            language=\"en-us\",\n            tos_agree=True)\n\ntests_api/test_bd.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:324: in post_registration\n    with allure.step(f'JSON: {response.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "Endpoint: /bad_request",
      "time" : {
        "start" : 1726535346396,
        "stop" : 1726535346396,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1726535346396,
        "stop" : 1726535346396,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Url: https://dbend.areso.pro/register",
        "time" : {
          "start" : 1726535346396,
          "stop" : 1726535346396,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
        "time" : {
          "start" : 1726535346396,
          "stop" : 1726535346396,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Body: \n                            {\n                            \"email\": email,\n                            \"password\": password,\n                            \"tos_agree\": True,\n                            \"language\": en-us\n                           }",
        "time" : {
          "start" : 1726535346396,
          "stop" : 1726535346396,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1726535346397,
        "stop" : 1726535346397,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 324, in post_registration\n    with allure.step(f'JSON: {response.json()}'):\n                              ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "Status code: 502",
        "time" : {
          "start" : 1726535346397,
          "stop" : 1726535346397,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az1773-824"
  }, {
    "name" : "thread",
    "value" : "2267-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 36,
        "unknown" : 0,
        "total" : 38
      },
      "items" : [ {
        "uid" : "2436c33017610138",
        "reportUrl" : "https://Areso.github.io/Oblache/158//#testresult/2436c33017610138",
        "status" : "passed",
        "time" : {
          "start" : 1726450016536,
          "stop" : 1726450016905,
          "duration" : 369
        }
      }, {
        "uid" : "df9546f7de0afd69",
        "reportUrl" : "https://Areso.github.io/Oblache/157//#testresult/df9546f7de0afd69",
        "status" : "passed",
        "time" : {
          "start" : 1726364248148,
          "stop" : 1726364248660,
          "duration" : 512
        }
      }, {
        "uid" : "2ff67803ddaba3e5",
        "reportUrl" : "https://Areso.github.io/Oblache/156//#testresult/2ff67803ddaba3e5",
        "status" : "passed",
        "time" : {
          "start" : 1726276874801,
          "stop" : 1726276875155,
          "duration" : 354
        }
      }, {
        "uid" : "a9736e1e142136a4",
        "reportUrl" : "https://Areso.github.io/Oblache/155//#testresult/a9736e1e142136a4",
        "status" : "passed",
        "time" : {
          "start" : 1726190548510,
          "stop" : 1726190548930,
          "duration" : 420
        }
      }, {
        "uid" : "a5a75bf7552d8572",
        "reportUrl" : "https://Areso.github.io/Oblache/154//#testresult/a5a75bf7552d8572",
        "status" : "passed",
        "time" : {
          "start" : 1726104127894,
          "stop" : 1726104128393,
          "duration" : 499
        }
      }, {
        "uid" : "914f6e1532b94cdc",
        "reportUrl" : "https://Areso.github.io/Oblache/153//#testresult/914f6e1532b94cdc",
        "status" : "passed",
        "time" : {
          "start" : 1726017693538,
          "stop" : 1726017693850,
          "duration" : 312
        }
      }, {
        "uid" : "45e37e90b88f783e",
        "reportUrl" : "https://Areso.github.io/Oblache/152//#testresult/45e37e90b88f783e",
        "status" : "passed",
        "time" : {
          "start" : 1725931350229,
          "stop" : 1725931350538,
          "duration" : 309
        }
      }, {
        "uid" : "e643871f8a8c4e87",
        "reportUrl" : "https://Areso.github.io/Oblache/12//#testresult/e643871f8a8c4e87",
        "status" : "passed",
        "time" : {
          "start" : 1725892808067,
          "stop" : 1725892808400,
          "duration" : 333
        }
      }, {
        "uid" : "cd57c9f12843a225",
        "reportUrl" : "https://Areso.github.io/Oblache/151//#testresult/cd57c9f12843a225",
        "status" : "passed",
        "time" : {
          "start" : 1725845193878,
          "stop" : 1725845194192,
          "duration" : 314
        }
      }, {
        "uid" : "89dc0bd1c559de39",
        "reportUrl" : "https://Areso.github.io/Oblache/11//#testresult/89dc0bd1c559de39",
        "status" : "passed",
        "time" : {
          "start" : 1725789052997,
          "stop" : 1725789053488,
          "duration" : 491
        }
      }, {
        "uid" : "a4c8e0c87faec01",
        "reportUrl" : "https://Areso.github.io/Oblache/150//#testresult/a4c8e0c87faec01",
        "status" : "passed",
        "time" : {
          "start" : 1725758853372,
          "stop" : 1725758853735,
          "duration" : 363
        }
      }, {
        "uid" : "1fffbc0fd388d7a5",
        "reportUrl" : "https://Areso.github.io/Oblache/149//#testresult/1fffbc0fd388d7a5",
        "status" : "passed",
        "time" : {
          "start" : 1725672014594,
          "stop" : 1725672015110,
          "duration" : 516
        }
      }, {
        "uid" : "aba2e26dac777bba",
        "reportUrl" : "https://Areso.github.io/Oblache/148//#testresult/aba2e26dac777bba",
        "status" : "passed",
        "time" : {
          "start" : 1725585816010,
          "stop" : 1725585816323,
          "duration" : 313
        }
      }, {
        "uid" : "f5aa7801bd95d42a",
        "reportUrl" : "https://Areso.github.io/Oblache/10//#testresult/f5aa7801bd95d42a",
        "status" : "passed",
        "time" : {
          "start" : 1725527865011,
          "stop" : 1725527865326,
          "duration" : 315
        }
      }, {
        "uid" : "ba76de31bc37a257",
        "reportUrl" : "https://Areso.github.io/Oblache/9//#testresult/ba76de31bc37a257",
        "status" : "passed",
        "time" : {
          "start" : 1725526770161,
          "stop" : 1725526770457,
          "duration" : 296
        }
      }, {
        "uid" : "c9f4ccc97b273136",
        "reportUrl" : "https://Areso.github.io/Oblache/147//#testresult/c9f4ccc97b273136",
        "status" : "passed",
        "time" : {
          "start" : 1725499488640,
          "stop" : 1725499488996,
          "duration" : 356
        }
      }, {
        "uid" : "1302fd5303f06cf7",
        "reportUrl" : "https://Areso.github.io/Oblache/146//#testresult/1302fd5303f06cf7",
        "status" : "passed",
        "time" : {
          "start" : 1725412899232,
          "stop" : 1725412899747,
          "duration" : 515
        }
      }, {
        "uid" : "7fe5cc922dbd015b",
        "reportUrl" : "https://Areso.github.io/Oblache/145//#testresult/7fe5cc922dbd015b",
        "status" : "passed",
        "time" : {
          "start" : 1725326427393,
          "stop" : 1725326427909,
          "duration" : 516
        }
      }, {
        "uid" : "eb208c179946f5",
        "reportUrl" : "https://Areso.github.io/Oblache/144//#testresult/eb208c179946f5",
        "status" : "passed",
        "time" : {
          "start" : 1725240155229,
          "stop" : 1725240155777,
          "duration" : 548
        }
      }, {
        "uid" : "ef9fec584b0438f4",
        "reportUrl" : "https://Areso.github.io/Oblache/143//#testresult/ef9fec584b0438f4",
        "status" : "passed",
        "time" : {
          "start" : 1725154781786,
          "stop" : 1725154782137,
          "duration" : 351
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "66e450cc751e7ed8.json",
  "parameterValues" : [ ]
}