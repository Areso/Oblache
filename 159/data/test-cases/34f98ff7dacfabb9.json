{
  "uid" : "34f98ff7dacfabb9",
  "name" : "GET list list_regions.",
  "fullName" : "tests_api.test_bd.TestGET#test_get_list_regions",
  "historyId" : "f582edc7610323801f9b520159e35f6b",
  "time" : {
    "start" : 1726535341249,
    "stop" : 1726535341769,
    "duration" : 520
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec3f2f2930>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestGET object at 0x7fec3e259160>\n\n    @allure.title('GET list list_regions.')\n    def test_get_list_regions(self):\n>       response = API.get_list_regions()\n\ntests_api/test_bd.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:203: in get_list_regions\n    with allure.step(f'JSON: {response.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec3f2f2930>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestGET object at 0x7fec3e259160>\n\n    @allure.title('GET list list_regions.')\n    def test_get_list_regions(self):\n>       response = API.get_list_regions()\n\ntests_api/test_bd.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:203: in get_list_regions\n    with allure.step(f'JSON: {response.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "Endpoint: /list_regions",
      "time" : {
        "start" : 1726535341768,
        "stop" : 1726535341768,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1726535341768,
        "stop" : 1726535341768,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Url: https://dbend.areso.pro/list_regions",
        "time" : {
          "start" : 1726535341768,
          "stop" : 1726535341768,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
        "time" : {
          "start" : 1726535341768,
          "stop" : 1726535341768,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Body: None",
        "time" : {
          "start" : 1726535341768,
          "stop" : 1726535341768,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1726535341768,
        "stop" : 1726535341769,
        "duration" : 1
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 203, in get_list_regions\n    with allure.step(f'JSON: {response.json()}'):\n                              ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "Status code: 502",
        "time" : {
          "start" : 1726535341769,
          "stop" : 1726535341769,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "GET"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestGET"
  }, {
    "name" : "host",
    "value" : "fv-az1773-824"
  }, {
    "name" : "thread",
    "value" : "2267-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 36,
        "unknown" : 0,
        "total" : 38
      },
      "items" : [ {
        "uid" : "e42a280673f6fd1",
        "reportUrl" : "https://Areso.github.io/Oblache/158//#testresult/e42a280673f6fd1",
        "status" : "passed",
        "time" : {
          "start" : 1726450013230,
          "stop" : 1726450013736,
          "duration" : 506
        }
      }, {
        "uid" : "f277be409541403c",
        "reportUrl" : "https://Areso.github.io/Oblache/157//#testresult/f277be409541403c",
        "status" : "passed",
        "time" : {
          "start" : 1726364244074,
          "stop" : 1726364244576,
          "duration" : 502
        }
      }, {
        "uid" : "e921f68ba8de8edc",
        "reportUrl" : "https://Areso.github.io/Oblache/156//#testresult/e921f68ba8de8edc",
        "status" : "passed",
        "time" : {
          "start" : 1726276871890,
          "stop" : 1726276872259,
          "duration" : 369
        }
      }, {
        "uid" : "ff481ff5788ea88a",
        "reportUrl" : "https://Areso.github.io/Oblache/155//#testresult/ff481ff5788ea88a",
        "status" : "passed",
        "time" : {
          "start" : 1726190545741,
          "stop" : 1726190546169,
          "duration" : 428
        }
      }, {
        "uid" : "2d05923b1049529c",
        "reportUrl" : "https://Areso.github.io/Oblache/154//#testresult/2d05923b1049529c",
        "status" : "passed",
        "time" : {
          "start" : 1726104123745,
          "stop" : 1726104124275,
          "duration" : 530
        }
      }, {
        "uid" : "1b2733e7634b510a",
        "reportUrl" : "https://Areso.github.io/Oblache/153//#testresult/1b2733e7634b510a",
        "status" : "passed",
        "time" : {
          "start" : 1726017690379,
          "stop" : 1726017690866,
          "duration" : 487
        }
      }, {
        "uid" : "684cd38acfde7516",
        "reportUrl" : "https://Areso.github.io/Oblache/152//#testresult/684cd38acfde7516",
        "status" : "passed",
        "time" : {
          "start" : 1725931347572,
          "stop" : 1725931347878,
          "duration" : 306
        }
      }, {
        "uid" : "b047d5b7aaefaaee",
        "reportUrl" : "https://Areso.github.io/Oblache/12//#testresult/b047d5b7aaefaaee",
        "status" : "passed",
        "time" : {
          "start" : 1725892805491,
          "stop" : 1725892805818,
          "duration" : 327
        }
      }, {
        "uid" : "6947abab024a6b87",
        "reportUrl" : "https://Areso.github.io/Oblache/151//#testresult/6947abab024a6b87",
        "status" : "passed",
        "time" : {
          "start" : 1725845191132,
          "stop" : 1725845191456,
          "duration" : 324
        }
      }, {
        "uid" : "57f99ffcecfd6569",
        "reportUrl" : "https://Areso.github.io/Oblache/11//#testresult/57f99ffcecfd6569",
        "status" : "passed",
        "time" : {
          "start" : 1725789050334,
          "stop" : 1725789050645,
          "duration" : 311
        }
      }, {
        "uid" : "958333c3bca44c85",
        "reportUrl" : "https://Areso.github.io/Oblache/150//#testresult/958333c3bca44c85",
        "status" : "passed",
        "time" : {
          "start" : 1725758850068,
          "stop" : 1725758850435,
          "duration" : 367
        }
      }, {
        "uid" : "bdf07046e0d0b54a",
        "reportUrl" : "https://Areso.github.io/Oblache/149//#testresult/bdf07046e0d0b54a",
        "status" : "passed",
        "time" : {
          "start" : 1725672009851,
          "stop" : 1725672010366,
          "duration" : 515
        }
      }, {
        "uid" : "f1346f170b7f1c87",
        "reportUrl" : "https://Areso.github.io/Oblache/148//#testresult/f1346f170b7f1c87",
        "status" : "passed",
        "time" : {
          "start" : 1725585812933,
          "stop" : 1725585813246,
          "duration" : 313
        }
      }, {
        "uid" : "375d321b8f8d4765",
        "reportUrl" : "https://Areso.github.io/Oblache/10//#testresult/375d321b8f8d4765",
        "status" : "passed",
        "time" : {
          "start" : 1725527851644,
          "stop" : 1725527851964,
          "duration" : 320
        }
      }, {
        "uid" : "fb516b102cf2d403",
        "reportUrl" : "https://Areso.github.io/Oblache/9//#testresult/fb516b102cf2d403",
        "status" : "passed",
        "time" : {
          "start" : 1725526756202,
          "stop" : 1725526756495,
          "duration" : 293
        }
      }, {
        "uid" : "1a3229e06c696ef9",
        "reportUrl" : "https://Areso.github.io/Oblache/147//#testresult/1a3229e06c696ef9",
        "status" : "passed",
        "time" : {
          "start" : 1725499485742,
          "stop" : 1725499486098,
          "duration" : 356
        }
      }, {
        "uid" : "28eecf3eb48145fd",
        "reportUrl" : "https://Areso.github.io/Oblache/146//#testresult/28eecf3eb48145fd",
        "status" : "passed",
        "time" : {
          "start" : 1725412895129,
          "stop" : 1725412895642,
          "duration" : 513
        }
      }, {
        "uid" : "43b027338a1c3e60",
        "reportUrl" : "https://Areso.github.io/Oblache/145//#testresult/43b027338a1c3e60",
        "status" : "passed",
        "time" : {
          "start" : 1725326423323,
          "stop" : 1725326423835,
          "duration" : 512
        }
      }, {
        "uid" : "ee14034a0de5a106",
        "reportUrl" : "https://Areso.github.io/Oblache/144//#testresult/ee14034a0de5a106",
        "status" : "passed",
        "time" : {
          "start" : 1725240151120,
          "stop" : 1725240151637,
          "duration" : 517
        }
      }, {
        "uid" : "6573aeb09ade56d3",
        "reportUrl" : "https://Areso.github.io/Oblache/143//#testresult/6573aeb09ade56d3",
        "status" : "passed",
        "time" : {
          "start" : 1725154778933,
          "stop" : 1725154779288,
          "duration" : 355
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "34f98ff7dacfabb9.json",
  "parameterValues" : [ ]
}