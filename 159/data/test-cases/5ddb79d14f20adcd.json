{
  "uid" : "5ddb79d14f20adcd",
  "name" : "POST checking ports_len negative symbols",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_checking_ports_len_negative_symbols",
  "historyId" : "381cac88cc6f55198cae5b20cb94989e",
  "time" : {
    "start" : 1726535359967,
    "stop" : 1726535360453,
    "duration" : 486
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec3f2f2930>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7fec3e25ade0>\n\n    @allure.title('POST checking ports_len negative symbols')\n    def test_post_checking_ports_len_negative_symbols(self):\n>       result = API.post_create_docker_container_checking_ports(\n            token=TestPOST.token,\n            port_len=\"qwert\")\n\ntests_api/test_bd.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:806: in post_create_docker_container_checking_ports\n    with allure.step(f'JSON: {response.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec3f2f2930>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7fec3e25ade0>\n\n    @allure.title('POST checking ports_len negative symbols')\n    def test_post_checking_ports_len_negative_symbols(self):\n>       result = API.post_create_docker_container_checking_ports(\n            token=TestPOST.token,\n            port_len=\"qwert\")\n\ntests_api/test_bd.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:806: in post_create_docker_container_checking_ports\n    with allure.step(f'JSON: {response.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "post_create_docker_container",
      "time" : {
        "start" : 1726535359967,
        "stop" : 1726535360452,
        "duration" : 485
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 806, in post_create_docker_container_checking_ports\n    with allure.step(f'JSON: {response.json()}'):\n                              ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "Endpoint: /container_create",
        "time" : {
          "start" : 1726535360452,
          "stop" : 1726535360452,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Request:",
        "time" : {
          "start" : 1726535360452,
          "stop" : 1726535360452,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Url: https://dbend.areso.pro/container_create",
          "time" : {
            "start" : 1726535360452,
            "stop" : 1726535360452,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
          "time" : {
            "start" : 1726535360452,
            "stop" : 1726535360452,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Body: {\"docker_image\": \"nginx\", \"int_ports\": f\"qwert\", \"env\": 3, \"region\": 3}",
          "time" : {
            "start" : 1726535360452,
            "stop" : 1726535360452,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 3,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      }, {
        "name" : "Response:",
        "time" : {
          "start" : 1726535360452,
          "stop" : 1726535360452,
          "duration" : 0
        },
        "status" : "broken",
        "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
        "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 806, in post_create_docker_container_checking_ports\n    with allure.step(f'JSON: {response.json()}'):\n                              ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
        "steps" : [ {
          "name" : "Status code: 502",
          "time" : {
            "start" : 1726535360452,
            "stop" : 1726535360452,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 1,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 7,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az1773-824"
  }, {
    "name" : "thread",
    "value" : "2267-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 36,
        "unknown" : 0,
        "total" : 38
      },
      "items" : [ {
        "uid" : "e44b1943aadfc4b6",
        "reportUrl" : "https://Areso.github.io/Oblache/158//#testresult/e44b1943aadfc4b6",
        "status" : "passed",
        "time" : {
          "start" : 1726450032170,
          "stop" : 1726450032533,
          "duration" : 363
        }
      }, {
        "uid" : "e2d13a3d50b9efdf",
        "reportUrl" : "https://Areso.github.io/Oblache/157//#testresult/e2d13a3d50b9efdf",
        "status" : "passed",
        "time" : {
          "start" : 1726364269517,
          "stop" : 1726364270016,
          "duration" : 499
        }
      }, {
        "uid" : "bd5eaca78e4bbc3",
        "reportUrl" : "https://Areso.github.io/Oblache/156//#testresult/bd5eaca78e4bbc3",
        "status" : "passed",
        "time" : {
          "start" : 1726276890993,
          "stop" : 1726276891347,
          "duration" : 354
        }
      }, {
        "uid" : "fc38142337050e83",
        "reportUrl" : "https://Areso.github.io/Oblache/155//#testresult/fc38142337050e83",
        "status" : "passed",
        "time" : {
          "start" : 1726190562417,
          "stop" : 1726190562724,
          "duration" : 307
        }
      }, {
        "uid" : "ef837b02049b23d4",
        "reportUrl" : "https://Areso.github.io/Oblache/154//#testresult/ef837b02049b23d4",
        "status" : "passed",
        "time" : {
          "start" : 1726104149613,
          "stop" : 1726104150122,
          "duration" : 509
        }
      }, {
        "uid" : "ab0db2df81a23d51",
        "reportUrl" : "https://Areso.github.io/Oblache/153//#testresult/ab0db2df81a23d51",
        "status" : "passed",
        "time" : {
          "start" : 1726017707403,
          "stop" : 1726017707715,
          "duration" : 312
        }
      }, {
        "uid" : "668eeff8218897a4",
        "reportUrl" : "https://Areso.github.io/Oblache/152//#testresult/668eeff8218897a4",
        "status" : "passed",
        "time" : {
          "start" : 1725931364881,
          "stop" : 1725931365194,
          "duration" : 313
        }
      }, {
        "uid" : "48b91dae5cd2d2f4",
        "reportUrl" : "https://Areso.github.io/Oblache/12//#testresult/48b91dae5cd2d2f4",
        "status" : "passed",
        "time" : {
          "start" : 1725892821921,
          "stop" : 1725892822231,
          "duration" : 310
        }
      }, {
        "uid" : "f858b1cd3a01c11c",
        "reportUrl" : "https://Areso.github.io/Oblache/151//#testresult/f858b1cd3a01c11c",
        "status" : "passed",
        "time" : {
          "start" : 1725845208442,
          "stop" : 1725845208753,
          "duration" : 311
        }
      }, {
        "uid" : "bca6a2219bf0d7e5",
        "reportUrl" : "https://Areso.github.io/Oblache/11//#testresult/bca6a2219bf0d7e5",
        "status" : "passed",
        "time" : {
          "start" : 1725789067400,
          "stop" : 1725789067712,
          "duration" : 312
        }
      }, {
        "uid" : "bcc50dce0d99403d",
        "reportUrl" : "https://Areso.github.io/Oblache/150//#testresult/bcc50dce0d99403d",
        "status" : "passed",
        "time" : {
          "start" : 1725758868823,
          "stop" : 1725758869182,
          "duration" : 359
        }
      }, {
        "uid" : "119039fc95a04f6d",
        "reportUrl" : "https://Areso.github.io/Oblache/149//#testresult/119039fc95a04f6d",
        "status" : "passed",
        "time" : {
          "start" : 1725672036141,
          "stop" : 1725672036650,
          "duration" : 509
        }
      }, {
        "uid" : "69c61f83b49e2806",
        "reportUrl" : "https://Areso.github.io/Oblache/148//#testresult/69c61f83b49e2806",
        "status" : "passed",
        "time" : {
          "start" : 1725585830453,
          "stop" : 1725585830757,
          "duration" : 304
        }
      }, {
        "uid" : "880cc8982505cf22",
        "reportUrl" : "https://Areso.github.io/Oblache/10//#testresult/880cc8982505cf22",
        "status" : "passed",
        "time" : {
          "start" : 1725527879024,
          "stop" : 1725527879337,
          "duration" : 313
        }
      }, {
        "uid" : "611d6eba1e3936ca",
        "reportUrl" : "https://Areso.github.io/Oblache/9//#testresult/611d6eba1e3936ca",
        "status" : "passed",
        "time" : {
          "start" : 1725526783600,
          "stop" : 1725526783898,
          "duration" : 298
        }
      }, {
        "uid" : "d1fb1917d897f6e5",
        "reportUrl" : "https://Areso.github.io/Oblache/147//#testresult/d1fb1917d897f6e5",
        "status" : "passed",
        "time" : {
          "start" : 1725499504075,
          "stop" : 1725499504436,
          "duration" : 361
        }
      }, {
        "uid" : "c138ca56a16136a",
        "reportUrl" : "https://Areso.github.io/Oblache/146//#testresult/c138ca56a16136a",
        "status" : "passed",
        "time" : {
          "start" : 1725412920678,
          "stop" : 1725412921193,
          "duration" : 515
        }
      }, {
        "uid" : "4c4fd347a5f0162c",
        "reportUrl" : "https://Areso.github.io/Oblache/145//#testresult/4c4fd347a5f0162c",
        "status" : "passed",
        "time" : {
          "start" : 1725326448746,
          "stop" : 1725326449258,
          "duration" : 512
        }
      }, {
        "uid" : "253a1d40678a281d",
        "reportUrl" : "https://Areso.github.io/Oblache/144//#testresult/253a1d40678a281d",
        "status" : "passed",
        "time" : {
          "start" : 1725240176544,
          "stop" : 1725240177053,
          "duration" : 509
        }
      }, {
        "uid" : "53637f4131a4f811",
        "reportUrl" : "https://Areso.github.io/Oblache/143//#testresult/53637f4131a4f811",
        "status" : "passed",
        "time" : {
          "start" : 1725154797113,
          "stop" : 1725154797464,
          "duration" : 351
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "5ddb79d14f20adcd.json",
  "parameterValues" : [ ]
}