{
  "uid" : "351a3b85943ff164",
  "name" : "POST registration for English language.",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_registration_for_english_language",
  "historyId" : "cf347c584436aa019858a6c679c01454",
  "time" : {
    "start" : 1726535343789,
    "stop" : 1726535344271,
    "duration" : 482
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec3f2f2930>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7fec3e2594f0>\n\n    @allure.title('POST registration for English language.')\n    def test_post_registration_for_english_language(self):\n>       response = API.post_registration_variety_email(\n            mail=random.choice(['gmail', 'mail', 'yandex']),\n            old_password=TestPOST.old_password,\n            prefix=random.choice(['com', 'ru', 'by']),\n            language=\"en-us\",\n            tos_agree=True)\n\ntests_api/test_bd.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:369: in post_registration_variety_email\n    with allure.step(f'JSON: {response.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec3f2f2930>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestPOST object at 0x7fec3e2594f0>\n\n    @allure.title('POST registration for English language.')\n    def test_post_registration_for_english_language(self):\n>       response = API.post_registration_variety_email(\n            mail=random.choice(['gmail', 'mail', 'yandex']),\n            old_password=TestPOST.old_password,\n            prefix=random.choice(['com', 'ru', 'by']),\n            language=\"en-us\",\n            tos_agree=True)\n\ntests_api/test_bd.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:369: in post_registration_variety_email\n    with allure.step(f'JSON: {response.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "post_registration_variety_email",
      "time" : {
        "start" : 1726535343789,
        "stop" : 1726535344270,
        "duration" : 481
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 369, in post_registration_variety_email\n    with allure.step(f'JSON: {response.json()}'):\n                              ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "Endpoint: /register",
        "time" : {
          "start" : 1726535344270,
          "stop" : 1726535344270,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Request:",
        "time" : {
          "start" : 1726535344270,
          "stop" : 1726535344270,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Url: https://dbend.areso.pro/register",
          "time" : {
            "start" : 1726535344270,
            "stop" : 1726535344270,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
          "time" : {
            "start" : 1726535344270,
            "stop" : 1726535344270,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Body: \n                                {\n                                \"email\": f'aqa2024_09_17_01_08_54@mail.com',\n                                \"password\": password,\n                                \"tos_agree\": True,\n                                \"language\": en-us\n                               }",
          "time" : {
            "start" : 1726535344270,
            "stop" : 1726535344270,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 3,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      }, {
        "name" : "Response:",
        "time" : {
          "start" : 1726535344270,
          "stop" : 1726535344270,
          "duration" : 0
        },
        "status" : "broken",
        "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
        "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 369, in post_registration_variety_email\n    with allure.step(f'JSON: {response.json()}'):\n                              ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
        "steps" : [ {
          "name" : "Status code: 502",
          "time" : {
            "start" : 1726535344270,
            "stop" : 1726535344270,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 1,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 7,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az1773-824"
  }, {
    "name" : "thread",
    "value" : "2267-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 36,
        "unknown" : 0,
        "total" : 38
      },
      "items" : [ {
        "uid" : "344790206c8e8e80",
        "reportUrl" : "https://Areso.github.io/Oblache/158//#testresult/344790206c8e8e80",
        "status" : "passed",
        "time" : {
          "start" : 1726450014924,
          "stop" : 1726450015291,
          "duration" : 367
        }
      }, {
        "uid" : "df7c740bb628a63d",
        "reportUrl" : "https://Areso.github.io/Oblache/157//#testresult/df7c740bb628a63d",
        "status" : "passed",
        "time" : {
          "start" : 1726364246085,
          "stop" : 1726364246601,
          "duration" : 516
        }
      }, {
        "uid" : "8d178b0e0ee06a9b",
        "reportUrl" : "https://Areso.github.io/Oblache/156//#testresult/8d178b0e0ee06a9b",
        "status" : "passed",
        "time" : {
          "start" : 1726276873354,
          "stop" : 1726276873731,
          "duration" : 377
        }
      }, {
        "uid" : "fb757f79779eeb70",
        "reportUrl" : "https://Areso.github.io/Oblache/155//#testresult/fb757f79779eeb70",
        "status" : "passed",
        "time" : {
          "start" : 1726190547130,
          "stop" : 1726190547587,
          "duration" : 457
        }
      }, {
        "uid" : "672d553b7602c097",
        "reportUrl" : "https://Areso.github.io/Oblache/154//#testresult/672d553b7602c097",
        "status" : "passed",
        "time" : {
          "start" : 1726104125816,
          "stop" : 1726104126332,
          "duration" : 516
        }
      }, {
        "uid" : "72e4296c524d3a4a",
        "reportUrl" : "https://Areso.github.io/Oblache/153//#testresult/72e4296c524d3a4a",
        "status" : "passed",
        "time" : {
          "start" : 1726017691956,
          "stop" : 1726017692279,
          "duration" : 323
        }
      }, {
        "uid" : "cb098d5f372bd8da",
        "reportUrl" : "https://Areso.github.io/Oblache/152//#testresult/cb098d5f372bd8da",
        "status" : "passed",
        "time" : {
          "start" : 1725931348828,
          "stop" : 1725931349279,
          "duration" : 451
        }
      }, {
        "uid" : "2fc5dab66db26e8d",
        "reportUrl" : "https://Areso.github.io/Oblache/12//#testresult/2fc5dab66db26e8d",
        "status" : "passed",
        "time" : {
          "start" : 1725892806759,
          "stop" : 1725892807090,
          "duration" : 331
        }
      }, {
        "uid" : "8fc3eb92caee0e69",
        "reportUrl" : "https://Areso.github.io/Oblache/151//#testresult/8fc3eb92caee0e69",
        "status" : "passed",
        "time" : {
          "start" : 1725845192571,
          "stop" : 1725845192911,
          "duration" : 340
        }
      }, {
        "uid" : "5a8fdf9d47f31c77",
        "reportUrl" : "https://Areso.github.io/Oblache/11//#testresult/5a8fdf9d47f31c77",
        "status" : "passed",
        "time" : {
          "start" : 1725789051704,
          "stop" : 1725789052039,
          "duration" : 335
        }
      }, {
        "uid" : "8f9a0cfd86873a3d",
        "reportUrl" : "https://Areso.github.io/Oblache/150//#testresult/8f9a0cfd86873a3d",
        "status" : "passed",
        "time" : {
          "start" : 1725758851890,
          "stop" : 1725758852261,
          "duration" : 371
        }
      }, {
        "uid" : "de59106d9f35d86c",
        "reportUrl" : "https://Areso.github.io/Oblache/149//#testresult/de59106d9f35d86c",
        "status" : "passed",
        "time" : {
          "start" : 1725672012401,
          "stop" : 1725672013040,
          "duration" : 639
        }
      }, {
        "uid" : "a3bd9e4c0e947762",
        "reportUrl" : "https://Areso.github.io/Oblache/148//#testresult/a3bd9e4c0e947762",
        "status" : "passed",
        "time" : {
          "start" : 1725585814543,
          "stop" : 1725585814869,
          "duration" : 326
        }
      }, {
        "uid" : "24501b2d56b6f0a2",
        "reportUrl" : "https://Areso.github.io/Oblache/10//#testresult/24501b2d56b6f0a2",
        "status" : "passed",
        "time" : {
          "start" : 1725527863603,
          "stop" : 1725527863927,
          "duration" : 324
        }
      }, {
        "uid" : "67cab63ecda0d663",
        "reportUrl" : "https://Areso.github.io/Oblache/9//#testresult/67cab63ecda0d663",
        "status" : "passed",
        "time" : {
          "start" : 1725526768816,
          "stop" : 1725526769122,
          "duration" : 306
        }
      }, {
        "uid" : "a1029d4c11d292a0",
        "reportUrl" : "https://Areso.github.io/Oblache/147//#testresult/a1029d4c11d292a0",
        "status" : "passed",
        "time" : {
          "start" : 1725499487173,
          "stop" : 1725499487544,
          "duration" : 371
        }
      }, {
        "uid" : "cc951d8e75b72a22",
        "reportUrl" : "https://Areso.github.io/Oblache/146//#testresult/cc951d8e75b72a22",
        "status" : "passed",
        "time" : {
          "start" : 1725412897170,
          "stop" : 1725412897682,
          "duration" : 512
        }
      }, {
        "uid" : "8d4356f1288b6b1c",
        "reportUrl" : "https://Areso.github.io/Oblache/145//#testresult/8d4356f1288b6b1c",
        "status" : "passed",
        "time" : {
          "start" : 1725326425332,
          "stop" : 1725326425846,
          "duration" : 514
        }
      }, {
        "uid" : "f66d460b21f228b5",
        "reportUrl" : "https://Areso.github.io/Oblache/144//#testresult/f66d460b21f228b5",
        "status" : "passed",
        "time" : {
          "start" : 1725240153190,
          "stop" : 1725240153699,
          "duration" : 509
        }
      }, {
        "uid" : "2084efc75121412e",
        "reportUrl" : "https://Areso.github.io/Oblache/143//#testresult/2084efc75121412e",
        "status" : "passed",
        "time" : {
          "start" : 1725154780337,
          "stop" : 1725154780717,
          "duration" : 380
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "351a3b85943ff164.json",
  "parameterValues" : [ ]
}