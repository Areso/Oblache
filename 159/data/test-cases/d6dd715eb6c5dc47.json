{
  "uid" : "d6dd715eb6c5dc47",
  "name" : "Capacity_db",
  "fullName" : "tests_api.test_bd.TestFull#test_capacity_db",
  "historyId" : "936f7fa0df691d843e1d921c6b4b86e7",
  "time" : {
    "start" : 1726535337159,
    "stop" : 1726535337632,
    "duration" : 473
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec3f2f2930>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7fec3e258a40>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec3f2f2930>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7fec3e258a40>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "Endpoint: /get_profile",
      "time" : {
        "start" : 1726535337632,
        "stop" : 1726535337632,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1726535337632,
        "stop" : 1726535337632,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Url: https://dbend.areso.pro/get_profile",
        "time" : {
          "start" : 1726535337632,
          "stop" : 1726535337632,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
        "time" : {
          "start" : 1726535337632,
          "stop" : 1726535337632,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Body: None",
        "time" : {
          "start" : 1726535337632,
          "stop" : 1726535337632,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1726535337632,
        "stop" : 1726535337632,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Status code: 502",
        "time" : {
          "start" : 1726535337632,
          "stop" : 1726535337632,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "JSON: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
        "time" : {
          "start" : 1726535337632,
          "stop" : 1726535337632,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "Test Connection DB"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "epic",
    "value" : "Connection DB"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestFull"
  }, {
    "name" : "host",
    "value" : "fv-az1773-824"
  }, {
    "name" : "thread",
    "value" : "2267-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 34,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 38
      },
      "items" : [ {
        "uid" : "99ae37dabe3c624",
        "reportUrl" : "https://Areso.github.io/Oblache/158//#testresult/99ae37dabe3c624",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1726450009701,
          "stop" : 1726450010936,
          "duration" : 1235
        }
      }, {
        "uid" : "9ff70aaa5493fd97",
        "reportUrl" : "https://Areso.github.io/Oblache/157//#testresult/9ff70aaa5493fd97",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1726364239263,
          "stop" : 1726364240812,
          "duration" : 1549
        }
      }, {
        "uid" : "41665ea0500c603d",
        "reportUrl" : "https://Areso.github.io/Oblache/156//#testresult/41665ea0500c603d",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1726276868107,
          "stop" : 1726276869373,
          "duration" : 1266
        }
      }, {
        "uid" : "290c357075a887e6",
        "reportUrl" : "https://Areso.github.io/Oblache/155//#testresult/290c357075a887e6",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1726190542379,
          "stop" : 1726190543701,
          "duration" : 1322
        }
      }, {
        "uid" : "b1cc65755198ab6c",
        "reportUrl" : "https://Areso.github.io/Oblache/154//#testresult/b1cc65755198ab6c",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1726104118918,
          "stop" : 1726104120491,
          "duration" : 1573
        }
      }, {
        "uid" : "857e4f7d77427266",
        "reportUrl" : "https://Areso.github.io/Oblache/153//#testresult/857e4f7d77427266",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1726017686858,
          "stop" : 1726017688119,
          "duration" : 1261
        }
      }, {
        "uid" : "c28ad66cb1dd0bc5",
        "reportUrl" : "https://Areso.github.io/Oblache/152//#testresult/c28ad66cb1dd0bc5",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1725931344091,
          "stop" : 1725931345348,
          "duration" : 1257
        }
      }, {
        "uid" : "f0ac3fc175604b6c",
        "reportUrl" : "https://Areso.github.io/Oblache/12//#testresult/f0ac3fc175604b6c",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1725892801907,
          "stop" : 1725892803107,
          "duration" : 1200
        }
      }, {
        "uid" : "b8cbf74aa25fe2b3",
        "reportUrl" : "https://Areso.github.io/Oblache/151//#testresult/b8cbf74aa25fe2b3",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1725845187587,
          "stop" : 1725845188653,
          "duration" : 1066
        }
      }, {
        "uid" : "365dff5f6fe36996",
        "reportUrl" : "https://Areso.github.io/Oblache/11//#testresult/365dff5f6fe36996",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1725789046875,
          "stop" : 1725789048006,
          "duration" : 1131
        }
      }, {
        "uid" : "4bf5ccc2ac782dcd",
        "reportUrl" : "https://Areso.github.io/Oblache/150//#testresult/4bf5ccc2ac782dcd",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1725758846334,
          "stop" : 1725758847713,
          "duration" : 1379
        }
      }, {
        "uid" : "46ed7b7d2d5533b6",
        "reportUrl" : "https://Areso.github.io/Oblache/149//#testresult/46ed7b7d2d5533b6",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1725672005128,
          "stop" : 1725672006690,
          "duration" : 1562
        }
      }, {
        "uid" : "5d0da810e30fddde",
        "reportUrl" : "https://Areso.github.io/Oblache/148//#testresult/5d0da810e30fddde",
        "status" : "passed",
        "time" : {
          "start" : 1725585698014,
          "stop" : 1725585810919,
          "duration" : 112905
        }
      }, {
        "uid" : "405ed8bfdf5caefb",
        "reportUrl" : "https://Areso.github.io/Oblache/10//#testresult/405ed8bfdf5caefb",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 500",
        "time" : {
          "start" : 1725527703283,
          "stop" : 1725527848686,
          "duration" : 145403
        }
      }, {
        "uid" : "7222205f54052",
        "reportUrl" : "https://Areso.github.io/Oblache/9//#testresult/7222205f54052",
        "status" : "passed",
        "time" : {
          "start" : 1725526592484,
          "stop" : 1725526754111,
          "duration" : 161627
        }
      }, {
        "uid" : "6ad96e99d8c94b81",
        "reportUrl" : "https://Areso.github.io/Oblache/147//#testresult/6ad96e99d8c94b81",
        "status" : "passed",
        "time" : {
          "start" : 1725499328721,
          "stop" : 1725499483578,
          "duration" : 154857
        }
      }, {
        "uid" : "cc8c6fb803cface4",
        "reportUrl" : "https://Areso.github.io/Oblache/146//#testresult/cc8c6fb803cface4",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1725412890228,
          "stop" : 1725412891975,
          "duration" : 1747
        }
      }, {
        "uid" : "291515b32352bafa",
        "reportUrl" : "https://Areso.github.io/Oblache/145//#testresult/291515b32352bafa",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1725326418642,
          "stop" : 1725326420197,
          "duration" : 1555
        }
      }, {
        "uid" : "b7282ccbd340f22d",
        "reportUrl" : "https://Areso.github.io/Oblache/144//#testresult/b7282ccbd340f22d",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1725240146462,
          "stop" : 1725240148041,
          "duration" : 1579
        }
      }, {
        "uid" : "e0202d1c5d3e50b9",
        "reportUrl" : "https://Areso.github.io/Oblache/143//#testresult/e0202d1c5d3e50b9",
        "status" : "broken",
        "statusDetails" : "KeyError: 'db_uuid'",
        "time" : {
          "start" : 1725154775338,
          "stop" : 1725154776581,
          "duration" : 1243
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d6dd715eb6c5dc47.json",
  "parameterValues" : [ ]
}