{
  "uid" : "cb51e462a1872e37",
  "name" : "POST db_create",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_db_create",
  "historyId" : "0b53e71177b12ce964a75d76d7986dbc",
  "time" : {
    "start" : 1738462039063,
    "stop" : 1738462039063,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f697b1eaff0>\ns = '<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture()\n    def get_token():\n        \"\"\"\n        Method return:\\n\n        token: str\\n\n        body: dict\\n\n        new_password: str\\n\n        old_password: str\\n\n        email: str\n        :returns: token: str, body: dict, new_password: str, old_password:str, email: str\n        \"\"\"\n        load_dotenv()\n        email = os.getenv('EMAIL')\n        old_password = os.getenv('PASSWORD')\n        new_password = '123456789'\n        try:\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n            token = result.json()['token']\n            if token != {}:\n                new_password, old_password = old_password, new_password\n            Checking.check_status_code(result, 200)\n            return token, body, new_password, old_password, email\n        except Exception as ex:\n            print(ex)\n            old_password, new_password = new_password, old_password\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n>           token = result.json()['token']\n\nconftest.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_token",
    "time" : {
      "start" : 1738462039063,
      "stop" : 1738462159675,
      "duration" : 120612
    },
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 902, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Oblache/Oblache/conftest.py\", line 40, in get_token\n    token = result.json()['token']\n            ^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az1338-766"
  }, {
    "name" : "thread",
    "value" : "2494-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 155,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 17,
        "unknown" : 0,
        "total" : 175
      },
      "items" : [ {
        "uid" : "9911bacb9a8a476e",
        "reportUrl" : "https://Areso.github.io/Oblache/296//#testresult/9911bacb9a8a476e",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1738373779077,
          "stop" : 1738373779715,
          "duration" : 638
        }
      }, {
        "uid" : "161a60576d4556e3",
        "reportUrl" : "https://Areso.github.io/Oblache/295//#testresult/161a60576d4556e3",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1738286678297,
          "stop" : 1738286679006,
          "duration" : 709
        }
      }, {
        "uid" : "6ed5f88a3f32f282",
        "reportUrl" : "https://Areso.github.io/Oblache/294//#testresult/6ed5f88a3f32f282",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1738200181458,
          "stop" : 1738200182111,
          "duration" : 653
        }
      }, {
        "uid" : "f8d7d0f792644f00",
        "reportUrl" : "https://Areso.github.io/Oblache/293//#testresult/f8d7d0f792644f00",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1738113843653,
          "stop" : 1738113844673,
          "duration" : 1020
        }
      }, {
        "uid" : "1daeef32e07c2886",
        "reportUrl" : "https://Areso.github.io/Oblache/292//#testresult/1daeef32e07c2886",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1738027436854,
          "stop" : 1738027437597,
          "duration" : 743
        }
      }, {
        "uid" : "a0319f75092346aa",
        "reportUrl" : "https://Areso.github.io/Oblache/291//#testresult/a0319f75092346aa",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737941145382,
          "stop" : 1737941146118,
          "duration" : 736
        }
      }, {
        "uid" : "8cd30be338b26c5e",
        "reportUrl" : "https://Areso.github.io/Oblache/290//#testresult/8cd30be338b26c5e",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737854822836,
          "stop" : 1737854823459,
          "duration" : 623
        }
      }, {
        "uid" : "ee34b23d4ad20a34",
        "reportUrl" : "https://Areso.github.io/Oblache/289//#testresult/ee34b23d4ad20a34",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737768046703,
          "stop" : 1737768047332,
          "duration" : 629
        }
      }, {
        "uid" : "c170fadb593bdd9a",
        "reportUrl" : "https://Areso.github.io/Oblache/288//#testresult/c170fadb593bdd9a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737681885003,
          "stop" : 1737681886048,
          "duration" : 1045
        }
      }, {
        "uid" : "4f563d85b94878c2",
        "reportUrl" : "https://Areso.github.io/Oblache/287//#testresult/4f563d85b94878c2",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737595462533,
          "stop" : 1737595463254,
          "duration" : 721
        }
      }, {
        "uid" : "f16c508ec39f83de",
        "reportUrl" : "https://Areso.github.io/Oblache/286//#testresult/f16c508ec39f83de",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737509176878,
          "stop" : 1737509177961,
          "duration" : 1083
        }
      }, {
        "uid" : "a59b60b440a88b7d",
        "reportUrl" : "https://Areso.github.io/Oblache/285//#testresult/a59b60b440a88b7d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737422646212,
          "stop" : 1737422646867,
          "duration" : 655
        }
      }, {
        "uid" : "c5b8bcfb70cdcefb",
        "reportUrl" : "https://Areso.github.io/Oblache/284//#testresult/c5b8bcfb70cdcefb",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737336337957,
          "stop" : 1737336338714,
          "duration" : 757
        }
      }, {
        "uid" : "e2627e237c893cc4",
        "reportUrl" : "https://Areso.github.io/Oblache/283//#testresult/e2627e237c893cc4",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737250609360,
          "stop" : 1737250610116,
          "duration" : 756
        }
      }, {
        "uid" : "48626376466efb0b",
        "reportUrl" : "https://Areso.github.io/Oblache/282//#testresult/48626376466efb0b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737163304019,
          "stop" : 1737163304658,
          "duration" : 639
        }
      }, {
        "uid" : "75829cf9d14a6f5d",
        "reportUrl" : "https://Areso.github.io/Oblache/281//#testresult/75829cf9d14a6f5d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1737077015441,
          "stop" : 1737077016092,
          "duration" : 651
        }
      }, {
        "uid" : "bba37a240b6bcc20",
        "reportUrl" : "https://Areso.github.io/Oblache/280//#testresult/bba37a240b6bcc20",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1736990641752,
          "stop" : 1736990642405,
          "duration" : 653
        }
      }, {
        "uid" : "1db98ae4922abfa",
        "reportUrl" : "https://Areso.github.io/Oblache/279//#testresult/1db98ae4922abfa",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1736904288725,
          "stop" : 1736904289459,
          "duration" : 734
        }
      }, {
        "uid" : "b0ba66dc39ee3826",
        "reportUrl" : "https://Areso.github.io/Oblache/278//#testresult/b0ba66dc39ee3826",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1736817779909,
          "stop" : 1736817780672,
          "duration" : 763
        }
      }, {
        "uid" : "de0f54fdd03fe582",
        "reportUrl" : "https://Areso.github.io/Oblache/277//#testresult/de0f54fdd03fe582",
        "status" : "failed",
        "statusDetails" : "AssertionError: Incorrect status code: 403",
        "time" : {
          "start" : 1736732312822,
          "stop" : 1736732313568,
          "duration" : 746
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "cb51e462a1872e37.json",
  "parameterValues" : [ ]
}