{
  "uid" : "d7ec1ac2ecfd7e32",
  "name" : "GET list list_dbenvs.",
  "fullName" : "tests_api.test_bd.TestGET#test_get_list_envs",
  "historyId" : "2fa206bdbd2e543ff40536a26ccb5d10",
  "time" : {
    "start" : 1725412894559,
    "stop" : 1725412895075,
    "duration" : 516
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff499398350>\ns = 'Some general exception', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestGET object at 0x7ff4984081d0>\n\n    @allure.title('GET list list_dbenvs.')\n    def test_get_list_envs(self):\n>       response = API.get_list_envs()\n\ntests_api/test_bd.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:178: in get_list_envs\n    with allure.step(f'JSON: {response.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff499398350>\ns = 'Some general exception', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestGET object at 0x7ff4984081d0>\n\n    @allure.title('GET list list_dbenvs.')\n    def test_get_list_envs(self):\n>       response = API.get_list_envs()\n\ntests_api/test_bd.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/request.py:178: in get_list_envs\n    with allure.step(f'JSON: {response.json()}'):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "Endpoint: /list_dbenvs",
      "time" : {
        "start" : 1725412895073,
        "stop" : 1725412895073,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1725412895073,
        "stop" : 1725412895073,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Url: https://dbend.areso.pro/list_dbenvs",
        "time" : {
          "start" : 1725412895073,
          "stop" : 1725412895073,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
        "time" : {
          "start" : 1725412895073,
          "stop" : 1725412895073,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Body: None",
        "time" : {
          "start" : 1725412895073,
          "stop" : 1725412895073,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1725412895073,
        "stop" : 1725412895073,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/Oblache/Oblache/tests_api/utils/request.py\", line 178, in get_list_envs\n    with allure.step(f'JSON: {response.json()}'):\n                              ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "Status code: 500",
        "time" : {
          "start" : 1725412895073,
          "stop" : 1725412895073,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "GET"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestGET"
  }, {
    "name" : "host",
    "value" : "fv-az1269-890"
  }, {
    "name" : "thread",
    "value" : "2298-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 19,
        "unknown" : 0,
        "total" : 21
      },
      "items" : [ {
        "uid" : "8026940f0109cb17",
        "reportUrl" : "https://Areso.github.io/Oblache/145//#testresult/8026940f0109cb17",
        "status" : "passed",
        "time" : {
          "start" : 1725326422820,
          "stop" : 1725326423322,
          "duration" : 502
        }
      }, {
        "uid" : "25442bd7b37faba1",
        "reportUrl" : "https://Areso.github.io/Oblache/144//#testresult/25442bd7b37faba1",
        "status" : "passed",
        "time" : {
          "start" : 1725240150604,
          "stop" : 1725240151118,
          "duration" : 514
        }
      }, {
        "uid" : "a80e125999cbd000",
        "reportUrl" : "https://Areso.github.io/Oblache/143//#testresult/a80e125999cbd000",
        "status" : "passed",
        "time" : {
          "start" : 1725154778579,
          "stop" : 1725154778932,
          "duration" : 353
        }
      }, {
        "uid" : "43622cdc8337c8be",
        "reportUrl" : "https://Areso.github.io/Oblache/142//#testresult/43622cdc8337c8be",
        "status" : "passed",
        "time" : {
          "start" : 1725067224704,
          "stop" : 1725067224995,
          "duration" : 291
        }
      }, {
        "uid" : "27136bd24c57523b",
        "reportUrl" : "https://Areso.github.io/Oblache/141//#testresult/27136bd24c57523b",
        "status" : "passed",
        "time" : {
          "start" : 1724980861975,
          "stop" : 1724980862406,
          "duration" : 431
        }
      }, {
        "uid" : "b3703361c15a8cd2",
        "reportUrl" : "https://Areso.github.io/Oblache/140//#testresult/b3703361c15a8cd2",
        "status" : "passed",
        "time" : {
          "start" : 1724894439621,
          "stop" : 1724894440011,
          "duration" : 390
        }
      }, {
        "uid" : "7d3781853fe477c4",
        "reportUrl" : "https://Areso.github.io/Oblache/139//#testresult/7d3781853fe477c4",
        "status" : "passed",
        "time" : {
          "start" : 1724808007388,
          "stop" : 1724808007906,
          "duration" : 518
        }
      }, {
        "uid" : "22d8e21d8d13298a",
        "reportUrl" : "https://Areso.github.io/Oblache/138//#testresult/22d8e21d8d13298a",
        "status" : "passed",
        "time" : {
          "start" : 1724721570301,
          "stop" : 1724721570604,
          "duration" : 303
        }
      }, {
        "uid" : "947d3039aeeb1e23",
        "reportUrl" : "https://Areso.github.io/Oblache/137//#testresult/947d3039aeeb1e23",
        "status" : "passed",
        "time" : {
          "start" : 1724635137385,
          "stop" : 1724635137891,
          "duration" : 506
        }
      }, {
        "uid" : "4cf7bf3918ac36ad",
        "reportUrl" : "https://Areso.github.io/Oblache/136//#testresult/4cf7bf3918ac36ad",
        "status" : "passed",
        "time" : {
          "start" : 1724549048166,
          "stop" : 1724549048501,
          "duration" : 335
        }
      }, {
        "uid" : "f40ddacdb6ab8758",
        "reportUrl" : "https://Areso.github.io/Oblache/135//#testresult/f40ddacdb6ab8758",
        "status" : "passed",
        "time" : {
          "start" : 1724462190079,
          "stop" : 1724462190438,
          "duration" : 359
        }
      }, {
        "uid" : "4bee31fb23e435ca",
        "reportUrl" : "https://Areso.github.io/Oblache/134//#testresult/4bee31fb23e435ca",
        "status" : "passed",
        "time" : {
          "start" : 1724375881490,
          "stop" : 1724375881814,
          "duration" : 324
        }
      }, {
        "uid" : "37af9ae1789743bf",
        "reportUrl" : "https://Areso.github.io/Oblache/133//#testresult/37af9ae1789743bf",
        "status" : "passed",
        "time" : {
          "start" : 1724289554039,
          "stop" : 1724289554566,
          "duration" : 527
        }
      }, {
        "uid" : "dc69f97d7b73a400",
        "reportUrl" : "https://Areso.github.io/Oblache/132//#testresult/dc69f97d7b73a400",
        "status" : "passed",
        "time" : {
          "start" : 1724203054213,
          "stop" : 1724203054578,
          "duration" : 365
        }
      }, {
        "uid" : "4aff7f38fe9d8a50",
        "reportUrl" : "https://Areso.github.io/Oblache/131//#testresult/4aff7f38fe9d8a50",
        "status" : "passed",
        "time" : {
          "start" : 1724116637379,
          "stop" : 1724116637882,
          "duration" : 503
        }
      }, {
        "uid" : "4aa27a1deb3c7a1c",
        "reportUrl" : "https://Areso.github.io/Oblache/130//#testresult/4aa27a1deb3c7a1c",
        "status" : "passed",
        "time" : {
          "start" : 1724030327453,
          "stop" : 1724030327761,
          "duration" : 308
        }
      }, {
        "uid" : "cd5374679db025ec",
        "reportUrl" : "https://Areso.github.io/Oblache/129//#testresult/cd5374679db025ec",
        "status" : "passed",
        "time" : {
          "start" : 1723944142695,
          "stop" : 1723944143195,
          "duration" : 500
        }
      }, {
        "uid" : "c8f310604c67367d",
        "reportUrl" : "https://Areso.github.io/Oblache/128//#testresult/c8f310604c67367d",
        "status" : "passed",
        "time" : {
          "start" : 1723857317053,
          "stop" : 1723857317605,
          "duration" : 552
        }
      }, {
        "uid" : "cc5b03a7049668a2",
        "reportUrl" : "https://Areso.github.io/Oblache/127//#testresult/cc5b03a7049668a2",
        "status" : "passed",
        "time" : {
          "start" : 1723696273955,
          "stop" : 1723696274262,
          "duration" : 307
        }
      }, {
        "uid" : "c6bc9783236845db",
        "reportUrl" : "https://Areso.github.io/Oblache/127//#testresult/c6bc9783236845db",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='dbend.areso.pro', port=443): Max retries exceeded with url: /list_dbenvs (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f64a417a780>: Failed to establish a new connection: [Errno 111] Connection refused'))",
        "time" : {
          "start" : 1723670668226,
          "stop" : 1723670668319,
          "duration" : 93
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d7ec1ac2ecfd7e32.json",
  "parameterValues" : [ ]
}