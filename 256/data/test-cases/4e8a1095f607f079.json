{
  "uid" : "4e8a1095f607f079",
  "name" : "POST logout with wrong logout token",
  "fullName" : "tests_api.test_bd.TestPOST#test_post_logout_with_wrong_logout_token",
  "historyId" : "ac26adaf1449f9d49ab62370d3da46df",
  "time" : {
    "start" : 1734917277736,
    "stop" : 1734917277736,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "KeyError: 'token'",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fda196430b0>\ns = 'Some general exception', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture()\n    def get_token():\n        \"\"\"\n        Method return:\\n\n        token: str\\n\n        body: dict\\n\n        new_password: str\\n\n        old_password: str\\n\n        email: str\n        :returns: token: str, body: dict, new_password: str, old_password:str, email: str\n        \"\"\"\n        load_dotenv()\n        email = os.getenv('EMAIL')\n        old_password = os.getenv('PASSWORD')\n        new_password = '123456789'\n        try:\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n>           token = result.json()['token']\n\nconftest.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture()\n    def get_token():\n        \"\"\"\n        Method return:\\n\n        token: str\\n\n        body: dict\\n\n        new_password: str\\n\n        old_password: str\\n\n        email: str\n        :returns: token: str, body: dict, new_password: str, old_password:str, email: str\n        \"\"\"\n        load_dotenv()\n        email = os.getenv('EMAIL')\n        old_password = os.getenv('PASSWORD')\n        new_password = '123456789'\n        try:\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n            token = result.json()['token']\n            if token != {}:\n                new_password, old_password = old_password, new_password\n            Checking.check_status_code(result, 200)\n            return token, body, new_password, old_password, email\n        except Exception as ex:\n            print(ex)\n            old_password, new_password = new_password, old_password\n            body = {\"email\": email, \"password\": f'{old_password}'}\n            result = requests.post('https://dbend.areso.pro/login', json=body)\n>           token = result.json()['token']\nE           KeyError: 'token'\n\nconftest.py:40: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_token",
    "time" : {
      "start" : 1734917277737,
      "stop" : 1734917278774,
      "duration" : 1037
    },
    "status" : "broken",
    "statusMessage" : "KeyError: 'token'\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 902, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Oblache/Oblache/conftest.py\", line 40, in get_token\n    token = result.json()['token']\n            ~~~~~~~~~~~~~^^^^^^^^^\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestPOST"
  }, {
    "name" : "host",
    "value" : "fv-az1694-299"
  }, {
    "name" : "thread",
    "value" : "2439-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 130,
        "unknown" : 0,
        "total" : 134
      },
      "items" : [ {
        "uid" : "819a50374f2e633b",
        "reportUrl" : "https://Areso.github.io/Oblache/255//#testresult/819a50374f2e633b",
        "status" : "passed",
        "time" : {
          "start" : 1734831586281,
          "stop" : 1734831587396,
          "duration" : 1115
        }
      }, {
        "uid" : "89a6f4cff61bbb87",
        "reportUrl" : "https://Areso.github.io/Oblache/254//#testresult/89a6f4cff61bbb87",
        "status" : "passed",
        "time" : {
          "start" : 1734744306595,
          "stop" : 1734744307570,
          "duration" : 975
        }
      }, {
        "uid" : "77fac8d88cfd5a0d",
        "reportUrl" : "https://Areso.github.io/Oblache/253//#testresult/77fac8d88cfd5a0d",
        "status" : "passed",
        "time" : {
          "start" : 1734658015092,
          "stop" : 1734658016049,
          "duration" : 957
        }
      }, {
        "uid" : "d8975f086a794e92",
        "reportUrl" : "https://Areso.github.io/Oblache/252//#testresult/d8975f086a794e92",
        "status" : "passed",
        "time" : {
          "start" : 1734572373188,
          "stop" : 1734572374688,
          "duration" : 1500
        }
      }, {
        "uid" : "1062231207c8285",
        "reportUrl" : "https://Areso.github.io/Oblache/250//#testresult/1062231207c8285",
        "status" : "passed",
        "time" : {
          "start" : 1734399700207,
          "stop" : 1734399701291,
          "duration" : 1084
        }
      }, {
        "uid" : "72810a1e806bfd98",
        "reportUrl" : "https://Areso.github.io/Oblache/249//#testresult/72810a1e806bfd98",
        "status" : "passed",
        "time" : {
          "start" : 1734313533435,
          "stop" : 1734313534534,
          "duration" : 1099
        }
      }, {
        "uid" : "f2cc693d858435cc",
        "reportUrl" : "https://Areso.github.io/Oblache/248//#testresult/f2cc693d858435cc",
        "status" : "passed",
        "time" : {
          "start" : 1734227282302,
          "stop" : 1734227283426,
          "duration" : 1124
        }
      }, {
        "uid" : "28d6288d9c223550",
        "reportUrl" : "https://Areso.github.io/Oblache/247//#testresult/28d6288d9c223550",
        "status" : "passed",
        "time" : {
          "start" : 1734140331205,
          "stop" : 1734140332291,
          "duration" : 1086
        }
      }, {
        "uid" : "b86091f878011694",
        "reportUrl" : "https://Areso.github.io/Oblache/246//#testresult/b86091f878011694",
        "status" : "passed",
        "time" : {
          "start" : 1734054194801,
          "stop" : 1734054196321,
          "duration" : 1520
        }
      }, {
        "uid" : "73b60ae7fb318ae4",
        "reportUrl" : "https://Areso.github.io/Oblache/245//#testresult/73b60ae7fb318ae4",
        "status" : "passed",
        "time" : {
          "start" : 1733967723777,
          "stop" : 1733967725328,
          "duration" : 1551
        }
      }, {
        "uid" : "3712b0e34158b8ad",
        "reportUrl" : "https://Areso.github.io/Oblache/244//#testresult/3712b0e34158b8ad",
        "status" : "passed",
        "time" : {
          "start" : 1733881345394,
          "stop" : 1733881346913,
          "duration" : 1519
        }
      }, {
        "uid" : "d3808e3d6826bbd6",
        "reportUrl" : "https://Areso.github.io/Oblache/243//#testresult/d3808e3d6826bbd6",
        "status" : "passed",
        "time" : {
          "start" : 1733795029107,
          "stop" : 1733795030652,
          "duration" : 1545
        }
      }, {
        "uid" : "3a2d87510e62c44a",
        "reportUrl" : "https://Areso.github.io/Oblache/242//#testresult/3a2d87510e62c44a",
        "status" : "passed",
        "time" : {
          "start" : 1733708720624,
          "stop" : 1733708722138,
          "duration" : 1514
        }
      }, {
        "uid" : "271ec9ea514a118b",
        "reportUrl" : "https://Areso.github.io/Oblache/241//#testresult/271ec9ea514a118b",
        "status" : "passed",
        "time" : {
          "start" : 1733622493673,
          "stop" : 1733622494752,
          "duration" : 1079
        }
      }, {
        "uid" : "8eef1f4eada27746",
        "reportUrl" : "https://Areso.github.io/Oblache/240//#testresult/8eef1f4eada27746",
        "status" : "passed",
        "time" : {
          "start" : 1733535622219,
          "stop" : 1733535623170,
          "duration" : 951
        }
      }, {
        "uid" : "81b6336fe07771f2",
        "reportUrl" : "https://Areso.github.io/Oblache/239//#testresult/81b6336fe07771f2",
        "status" : "passed",
        "time" : {
          "start" : 1733449267007,
          "stop" : 1733449268118,
          "duration" : 1111
        }
      }, {
        "uid" : "4669121c6c7cfcc4",
        "reportUrl" : "https://Areso.github.io/Oblache/238//#testresult/4669121c6c7cfcc4",
        "status" : "passed",
        "time" : {
          "start" : 1733362936846,
          "stop" : 1733362937959,
          "duration" : 1113
        }
      }, {
        "uid" : "312646b362d7d8d",
        "reportUrl" : "https://Areso.github.io/Oblache/237//#testresult/312646b362d7d8d",
        "status" : "passed",
        "time" : {
          "start" : 1733276560037,
          "stop" : 1733276561590,
          "duration" : 1553
        }
      }, {
        "uid" : "8d0eef2eec08e57f",
        "reportUrl" : "https://Areso.github.io/Oblache/236//#testresult/8d0eef2eec08e57f",
        "status" : "passed",
        "time" : {
          "start" : 1733190130404,
          "stop" : 1733190131529,
          "duration" : 1125
        }
      }, {
        "uid" : "7a3d26ee981a7c95",
        "reportUrl" : "https://Areso.github.io/Oblache/235//#testresult/7a3d26ee981a7c95",
        "status" : "passed",
        "time" : {
          "start" : 1733103814274,
          "stop" : 1733103815314,
          "duration" : 1040
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "4e8a1095f607f079.json",
  "parameterValues" : [ ]
}