{
  "uid" : "8fb8c189a8a56829",
  "name" : "Capacity_db",
  "fullName" : "tests_api.test_bd.TestFull#test_capacity_db",
  "historyId" : "936f7fa0df691d843e1d921c6b4b86e7",
  "time" : {
    "start" : 1743903953796,
    "stop" : 1743903954276,
    "duration" : 480
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5ce2627080>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7f5ce1412bd0>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:338: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5ce2627080>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/json/decoder.py:356: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_bd.TestFull object at 0x7f5ce1412bd0>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('Capacity_db')\n    def test_capacity_db(self):\n>       start_mb_value = API.get_profile(TestFull.token).json()['data'][\"content\"][4][1]\n\ntests_api/test_bd.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError",
    "steps" : [ {
      "name" : "Endpoint: /get_profile",
      "time" : {
        "start" : 1743903954276,
        "stop" : 1743903954276,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1743903954276,
        "stop" : 1743903954276,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Headers: {'Content-Type': 'application/json', 'Authorization': 'None'}",
        "time" : {
          "start" : 1743903954276,
          "stop" : 1743903954276,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Body: None",
        "time" : {
          "start" : 1743903954276,
          "stop" : 1743903954276,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1743903954276,
        "stop" : 1743903954276,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Status code: 502",
        "time" : {
          "start" : 1743903954276,
          "stop" : 1743903954276,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "JSON: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n",
        "time" : {
          "start" : 1743903954276,
          "stop" : 1743903954276,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Connection DB"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "suite",
    "value" : "Test Connection DB"
  }, {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "subSuite",
    "value" : "TestFull"
  }, {
    "name" : "host",
    "value" : "fv-az1947-294"
  }, {
    "name" : "thread",
    "value" : "2529-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_bd"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 234,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 238
      },
      "items" : [ {
        "uid" : "2375c470da769ad0",
        "reportUrl" : "https://Areso.github.io/Oblache/359//#testresult/2375c470da769ad0",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743817144794,
          "stop" : 1743817145261,
          "duration" : 467
        }
      }, {
        "uid" : "2ffecf980305adbc",
        "reportUrl" : "https://Areso.github.io/Oblache/358//#testresult/2ffecf980305adbc",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743730830005,
          "stop" : 1743730830470,
          "duration" : 465
        }
      }, {
        "uid" : "fc56c05020463e56",
        "reportUrl" : "https://Areso.github.io/Oblache/357//#testresult/fc56c05020463e56",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743644449956,
          "stop" : 1743644450453,
          "duration" : 497
        }
      }, {
        "uid" : "b7365ccb910f6e65",
        "reportUrl" : "https://Areso.github.io/Oblache/356//#testresult/b7365ccb910f6e65",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743558125489,
          "stop" : 1743558125796,
          "duration" : 307
        }
      }, {
        "uid" : "6549919e4f158a2b",
        "reportUrl" : "https://Areso.github.io/Oblache/355//#testresult/6549919e4f158a2b",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743472299649,
          "stop" : 1743472300141,
          "duration" : 492
        }
      }, {
        "uid" : "c0ef9c9c8a416a9",
        "reportUrl" : "https://Areso.github.io/Oblache/354//#testresult/c0ef9c9c8a416a9",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743385539655,
          "stop" : 1743385540129,
          "duration" : 474
        }
      }, {
        "uid" : "5edf223c137469c6",
        "reportUrl" : "https://Areso.github.io/Oblache/353//#testresult/5edf223c137469c6",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743299235279,
          "stop" : 1743299235780,
          "duration" : 501
        }
      }, {
        "uid" : "b61d97a109955ece",
        "reportUrl" : "https://Areso.github.io/Oblache/352//#testresult/b61d97a109955ece",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743212345734,
          "stop" : 1743212346038,
          "duration" : 304
        }
      }, {
        "uid" : "802c486be9a5e896",
        "reportUrl" : "https://Areso.github.io/Oblache/351//#testresult/802c486be9a5e896",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743126009838,
          "stop" : 1743126010214,
          "duration" : 376
        }
      }, {
        "uid" : "edf8ba3d2cdfe465",
        "reportUrl" : "https://Areso.github.io/Oblache/350//#testresult/edf8ba3d2cdfe465",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1743039591598,
          "stop" : 1743039591962,
          "duration" : 364
        }
      }, {
        "uid" : "48c07887e747c1e",
        "reportUrl" : "https://Areso.github.io/Oblache/349//#testresult/48c07887e747c1e",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742953220207,
          "stop" : 1742953220706,
          "duration" : 499
        }
      }, {
        "uid" : "61b119a95b3bde26",
        "reportUrl" : "https://Areso.github.io/Oblache/348//#testresult/61b119a95b3bde26",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742866849484,
          "stop" : 1742866849771,
          "duration" : 287
        }
      }, {
        "uid" : "7a6a6c7949783ab5",
        "reportUrl" : "https://Areso.github.io/Oblache/347//#testresult/7a6a6c7949783ab5",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742780575236,
          "stop" : 1742780575611,
          "duration" : 375
        }
      }, {
        "uid" : "97e4e6932b08260f",
        "reportUrl" : "https://Areso.github.io/Oblache/346//#testresult/97e4e6932b08260f",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742694287609,
          "stop" : 1742694287899,
          "duration" : 290
        }
      }, {
        "uid" : "d62d1a8c6d8fa7c4",
        "reportUrl" : "https://Areso.github.io/Oblache/345//#testresult/d62d1a8c6d8fa7c4",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742607459787,
          "stop" : 1742607460091,
          "duration" : 304
        }
      }, {
        "uid" : "1d3b7e4988939292",
        "reportUrl" : "https://Areso.github.io/Oblache/344//#testresult/1d3b7e4988939292",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742521207554,
          "stop" : 1742521207953,
          "duration" : 399
        }
      }, {
        "uid" : "5f396dfed554fc9f",
        "reportUrl" : "https://Areso.github.io/Oblache/343//#testresult/5f396dfed554fc9f",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742434710508,
          "stop" : 1742434710975,
          "duration" : 467
        }
      }, {
        "uid" : "24e191b10811b399",
        "reportUrl" : "https://Areso.github.io/Oblache/342//#testresult/24e191b10811b399",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742348377099,
          "stop" : 1742348377402,
          "duration" : 303
        }
      }, {
        "uid" : "1518ec3f3e0c4ee7",
        "reportUrl" : "https://Areso.github.io/Oblache/341//#testresult/1518ec3f3e0c4ee7",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742261956929,
          "stop" : 1742261957306,
          "duration" : 377
        }
      }, {
        "uid" : "65336225b3495b",
        "reportUrl" : "https://Areso.github.io/Oblache/340//#testresult/65336225b3495b",
        "status" : "broken",
        "statusDetails" : "KeyError: 'data'",
        "time" : {
          "start" : 1742175684104,
          "stop" : 1742175684597,
          "duration" : 493
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8fb8c189a8a56829.json",
  "parameterValues" : [ ]
}